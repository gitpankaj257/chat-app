{"ast":null,"code":"var _jsxFileName = \"/var/www/html/chat-app/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport App from \"./App\";\nimport \"./index.css\"; // Create an http link:\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n}); // Create a WebSocket link:\n\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/\",\n  options: {\n    reconnect: true,\n    lazy: true,\n    inactivityTimeout: 30000\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst link = split( // split based on operation type\n({\n  query\n}) => {\n  const _getMainDefinition = getMainDefinition(query),\n        kind = _getMainDefinition.kind,\n        operation = _getMainDefinition.operation;\n\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\"));","map":{"version":3,"sources":["/var/www/html/chat-app/client/src/index.js"],"names":["React","ReactDOM","ApolloClient","ApolloProvider","split","HttpLink","WebSocketLink","getMainDefinition","InMemoryCache","App","httpLink","uri","wsLink","options","reconnect","lazy","inactivityTimeout","link","query","kind","operation","client","cache","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,OAAO,aAAP,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB,C,CAIA;;AACA,MAAMC,MAAM,GAAG,IAAIN,aAAJ,CAAkB;AAC/BK,EAAAA,GAAG,wBAD4B;AAE/BE,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,IAAI,EAAE,IAFC;AAGPC,IAAAA,iBAAiB,EAAE;AAHZ;AAFsB,CAAlB,CAAf,C,CASA;AACA;;AACA,MAAMC,IAAI,GAAGb,KAAK,EAChB;AACA,CAAC;AAAEc,EAAAA;AAAF,CAAD,KAAe;AAAA,6BACeX,iBAAiB,CAACW,KAAD,CADhC;AAAA,QACLC,IADK,sBACLA,IADK;AAAA,QACCC,SADD,sBACCA,SADD;;AAEb,SAAOD,IAAI,KAAK,qBAAT,IAAkCC,SAAS,KAAK,cAAvD;AACD,CALe,EAMhBR,MANgB,EAOhBF,QAPgB,CAAlB;AAUA,MAAMW,MAAM,GAAG,IAAInB,YAAJ,CAAiB;AAC9Be,EAAAA,IAD8B;AAE9BK,EAAAA,KAAK,EAAE,IAAId,aAAJ;AAFuB,CAAjB,CAAf;AAKAP,QAAQ,CAACsB,MAAT,eACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport App from \"./App\";\n\nimport \"./index.css\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/'\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/`,\n  options: {\n    reconnect: true,\n    lazy: true,\n    inactivityTimeout: 30000,\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n"]},"metadata":{},"sourceType":"module"}