{"ast":null,"code":"import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { cloneDeep, isEqual, tryFunctionOrLogError, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, assign, getDefaultValues, getMutationDefinition, hasClientExports, graphQLResultHasError, getQueryDefinition, getOperationDefinition, getOperationName, removeConnectionDirectiveFromDocument } from 'apollo-utilities';\nimport { Observable as Observable$1, ApolloLink, execute } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { DedupLink } from 'apollo-link-dedup';\nimport { visit, BREAK } from 'graphql/language/visitor';\nvar NetworkStatus;\n\n(function (NetworkStatus) {\n  NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n  NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n  NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n  NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n  NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n  NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n  NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n\nfunction isNetworkRequestInFlight(networkStatus) {\n  return networkStatus < 7;\n}\n\nvar Observable = function (_super) {\n  __extends(Observable, _super);\n\n  function Observable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Observable.prototype[$$observable] = function () {\n    return this;\n  };\n\n  Observable.prototype['@@observable'] = function () {\n    return this;\n  };\n\n  return Observable;\n}(Observable$1);\n\nfunction isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var message = '';\n\n  if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nvar FetchType;\n\n(function (FetchType) {\n  FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n  FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n  FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function hasError(storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.graphQLErrors && storeValue.graphQLErrors.length > 0 && policy === 'none' || storeValue.networkError);\n};\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        options = _a.options,\n        _b = _a.shouldSubscribe,\n        shouldSubscribe = _b === void 0 ? true : _b;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe;\n    _this.queryManager = queryManager;\n    _this.observers = [];\n    _this.subscriptionHandles = [];\n    return _this;\n  }\n\n  ObservableQuery.prototype.result = function () {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      var subscription;\n      var observer = {\n        next: function next(result) {\n          resolve(result);\n\n          if (!that.observers.some(function (obs) {\n            return obs !== observer;\n          })) {\n            that.queryManager.removeQuery(that.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: function error(_error) {\n          reject(_error);\n        }\n      };\n      subscription = that.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.currentResult = function () {\n    var result = this.getCurrentResult();\n\n    if (result.data === undefined) {\n      result.data = {};\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function () {\n    if (this.isTornDown) {\n      return {\n        data: this.lastError ? undefined : this.lastResult ? this.lastResult.data : undefined,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n\n    if (hasError(queryStoreValue, this.options.errorPolicy)) {\n      return {\n        data: undefined,\n        loading: false,\n        networkStatus: queryStoreValue.networkStatus,\n        error: new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        })\n      };\n    }\n\n    if (queryStoreValue && queryStoreValue.variables) {\n      this.options.variables = Object.assign({}, this.options.variables, queryStoreValue.variables);\n    }\n\n    var _a = this.queryManager.getCurrentQueryResult(this),\n        data = _a.data,\n        partial = _a.partial;\n\n    var queryLoading = !queryStoreValue || queryStoreValue.networkStatus === NetworkStatus.loading;\n    var loading = this.options.fetchPolicy === 'network-only' && queryLoading || partial && this.options.fetchPolicy !== 'cache-only';\n    var networkStatus;\n\n    if (queryStoreValue) {\n      networkStatus = queryStoreValue.networkStatus;\n    } else {\n      networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n    }\n\n    var result = {\n      data: data,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    };\n\n    if (queryStoreValue && queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n      result.errors = queryStoreValue.graphQLErrors;\n    }\n\n    if (!partial) {\n      this.lastResult = __assign({}, result, {\n        stale: false\n      });\n      this.lastResultSnapshot = cloneDeep(this.lastResult);\n    }\n\n    return __assign({}, result, {\n      partial: partial\n    });\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    var snapshot = this.lastResultSnapshot;\n    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && isEqual(snapshot.data, newResult.data));\n  };\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new Error('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      this.variables = Object.assign({}, this.variables, variables);\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      this.options.variables = Object.assign({}, this.options.variables, this.variables);\n    }\n\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    var combinedOptions = __assign({}, this.options, {\n      fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only'\n    });\n\n    return this.queryManager.fetchQuery(this.queryId, combinedOptions, FetchType.refetch).then(function (result) {\n      return result;\n    });\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n    var combinedOptions;\n    return Promise.resolve().then(function () {\n      var qid = _this.queryManager.generateQueryId();\n\n      if (fetchMoreOptions.query) {\n        combinedOptions = fetchMoreOptions;\n      } else {\n        combinedOptions = __assign({}, _this.options, fetchMoreOptions, {\n          variables: Object.assign({}, _this.variables, fetchMoreOptions.variables)\n        });\n      }\n\n      combinedOptions.fetchPolicy = 'network-only';\n      return _this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, _this.queryId);\n    }).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n\n      return fetchMoreResult;\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function next(subscriptionData) {\n        if (options.updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return options.updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function error(err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        console.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptionHandles.push(subscription);\n    return function () {\n      var i = _this.subscriptionHandles.indexOf(subscription);\n\n      if (i >= 0) {\n        _this.subscriptionHandles.splice(i, 1);\n\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldOptions = this.options;\n    this.options = Object.assign({}, this.options, opts);\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    var tryFetch = oldOptions.fetchPolicy !== 'network-only' && opts.fetchPolicy === 'network-only' || oldOptions.fetchPolicy === 'cache-only' && opts.fetchPolicy !== 'cache-only' || oldOptions.fetchPolicy === 'standby' && opts.fetchPolicy !== 'standby' || false;\n    return this.setVariables(this.options.variables, tryFetch, opts.fetchResults);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    }\n\n    this.isTornDown = false;\n    var newVariables = variables ? variables : this.variables;\n\n    if (isEqual(newVariables, this.variables) && !tryFetch) {\n      if (this.observers.length === 0 || !fetchResults) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      }\n\n      return this.result();\n    } else {\n      this.variables = newVariables;\n      this.options.variables = newVariables;\n\n      if (this.observers.length === 0) {\n        return new Promise(function (resolve) {\n          return resolve();\n        });\n      }\n\n      return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, {\n        variables: this.variables\n      })).then(function (result) {\n        return result;\n      });\n    }\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _a = this.queryManager.getQueryWithPreviousResult(this.queryId),\n        previousResult = _a.previousResult,\n        variables = _a.variables,\n        document = _a.document;\n\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n\n    if (newResult) {\n      this.queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      this.queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n\n    if (observer._subscription && observer._subscription._observer && !observer._subscription._observer.error) {\n      observer._subscription._observer.error = function (error) {\n        console.error('Unhandled error', error.message, error.stack);\n      };\n    }\n\n    this.observers.push(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n    if (this.observers.length === 1) this.setUpQuery();\n    return function () {\n      _this.observers = _this.observers.filter(function (obs) {\n        return obs !== observer;\n      });\n\n      if (_this.observers.length === 0) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n\n    if (this.shouldSubscribe) {\n      this.queryManager.addObservableQuery(this.queryId, this);\n    }\n\n    if (!!this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      this.queryManager.startPollingQuery(this.options, this.queryId);\n    }\n\n    var observer = {\n      next: function next(result) {\n        _this.lastResult = result;\n        _this.lastResultSnapshot = cloneDeep(result);\n\n        _this.observers.forEach(function (obs) {\n          return obs.next && obs.next(result);\n        });\n      },\n      error: function error(_error2) {\n        _this.lastError = _error2;\n\n        _this.observers.forEach(function (obs) {\n          return obs.error && obs.error(_error2);\n        });\n      }\n    };\n    this.queryManager.startQuery(this.queryId, this.options, this.queryManager.queryListenerForObserver(this.queryId, this.options, observer));\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    this.isTornDown = true;\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.subscriptionHandles.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptionHandles = [];\n    this.queryManager.removeObservableQuery(this.queryId);\n    this.queryManager.stopQuery(this.queryId);\n    this.observers = [];\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n  var fetchPolicy = obsQuery.options.fetchPolicy;\n  process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only') : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = function () {\n  function MutationStore() {\n    this.store = {};\n  }\n\n  MutationStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  MutationStore.prototype.get = function (mutationId) {\n    return this.store[mutationId];\n  };\n\n  MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n    this.store[mutationId] = {\n      mutation: mutation,\n      variables: variables || {},\n      loading: true,\n      error: null\n    };\n  };\n\n  MutationStore.prototype.markMutationError = function (mutationId, error) {\n    var mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = error;\n  };\n\n  MutationStore.prototype.markMutationResult = function (mutationId) {\n    var mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = null;\n  };\n\n  MutationStore.prototype.reset = function () {\n    this.store = {};\n  };\n\n  return MutationStore;\n}();\n\nvar QueryStore = function () {\n  function QueryStore() {\n    this.store = {};\n  }\n\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n\n    if (previousQuery && previousQuery.document !== query.document && !isEqual(previousQuery.document, query.document)) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError('Internal Error: may not update existing query string in store');\n    }\n\n    var isSetVariables = false;\n    var previousVariables = null;\n\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    var networkStatus;\n\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var graphQLErrors = [];\n\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    };\n\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = result.errors && result.errors.length ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = complete ? NetworkStatus.ready : NetworkStatus.loading;\n  };\n\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this;\n\n    this.store = Object.keys(this.store).filter(function (queryId) {\n      return observableQueryIds.indexOf(queryId) > -1;\n    }).reduce(function (res, key) {\n      res[key] = __assign({}, _this.store[key], {\n        networkStatus: NetworkStatus.loading\n      });\n      return res;\n    }, {});\n  };\n\n  return QueryStore;\n}();\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign({}, remoteResult, {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2, remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n\n      process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in query but no client resolvers were specified. ' + 'You can now pass apollo-link-state resolvers to the ApolloClient constructor.');\n    }\n\n    return null;\n  };\n\n  LocalState.prototype.serverQuery = function (document) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var cache = this.cache;\n\n    var newContext = __assign({}, context, {\n      cache: cache,\n      getCacheKey: function getCacheKey(obj) {\n        if (cache.config) {\n          return cache.config.dataIdFromObject(obj);\n        } else {\n          process.env.NODE_ENV === \"production\" ? invariant(false) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' + 'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n        }\n      }\n    });\n\n    return newContext;\n  };\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign({}, variables, data.exportedVariables);\n          })];\n        }\n\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n\n  LocalState.prototype.shouldForceResolver = function (field) {\n    return this.shouldForceResolvers(field);\n  };\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function fragmentMatcher() {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign({}, context, {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function execute(selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                process.env.NODE_ENV === \"production\" ? invariant(fragment) : invariant(fragment, \"No fragment named \" + selection.name.value);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2];\n            });\n          });\n        };\n\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolver(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field\n              }));\n            }\n          }\n        }\n\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n\n          if (!field.selectionSet) {\n            return result;\n          }\n\n          if (result == null) {\n            return result;\n          }\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n\n  return LocalState;\n}();\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        store = _a.store,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d,\n        _e = _a.clientAwareness,\n        clientAwareness = _e === void 0 ? {} : _e,\n        localState = _a.localState;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore();\n    this.clientAwareness = {};\n    this.idCounter = 1;\n    this.queries = new Map();\n    this.fetchQueryRejectFns = new Map();\n    this.queryIdsByName = {};\n    this.pollingInfoByQueryId = new Map();\n    this.nextPoll = null;\n    this.link = link;\n    this.deduplicator = ApolloLink.from([new DedupLink(), link]);\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: store.getCache()\n    });\n    this.ssrMode = ssrMode;\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(new Error('QueryManager stopped while query was in flight'));\n    });\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, cache, generateUpdateQueriesInfo, updatedVariables, _f;\n\n      var _this = this;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache') : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n            mutationId = this.generateQueryId();\n            cache = this.dataStore.getCache();\n            mutation = cache.transformDocument(mutation), variables = assign({}, getDefaultValues(getMutationDefinition(mutation)), variables);\n            this.setQuery(mutationId, function () {\n              return {\n                document: mutation\n              };\n            });\n\n            generateUpdateQueriesInfo = function generateUpdateQueriesInfo() {\n              var ret = {};\n\n              if (updateQueriesByName) {\n                Object.keys(updateQueriesByName).forEach(function (queryName) {\n                  return (_this.queryIdsByName[queryName] || []).forEach(function (queryId) {\n                    ret[queryId] = {\n                      updater: updateQueriesByName[queryName],\n                      query: _this.queryStore.get(queryId)\n                    };\n                  });\n                });\n              }\n\n              return ret;\n            };\n\n            if (!hasClientExports(mutation)) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            _f = _g.sent();\n            return [3, 3];\n\n          case 2:\n            _f = variables;\n            _g.label = 3;\n\n          case 3:\n            updatedVariables = _f;\n            this.mutationStore.initMutation(mutationId, mutation, updatedVariables);\n            this.dataStore.markMutationInit({\n              mutationId: mutationId,\n              document: mutation,\n              variables: updatedVariables || {},\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n              optimisticResponse: optimisticResponse\n            });\n            this.broadcastQueries();\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n\n              var operation = _this.buildOperationForLink(mutation, updatedVariables, __assign({}, context, {\n                optimisticResponse: optimisticResponse\n              }));\n\n              var completeMutation = function completeMutation() {\n                if (error) {\n                  _this.mutationStore.markMutationError(mutationId, error);\n                }\n\n                _this.dataStore.markMutationComplete({\n                  mutationId: mutationId,\n                  optimisticResponse: optimisticResponse\n                });\n\n                _this.broadcastQueries();\n\n                if (error) {\n                  return Promise.reject(error);\n                }\n\n                if (typeof refetchQueries === 'function') {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                var refetchQueryPromises = [];\n\n                for (var _i = 0, refetchQueries_1 = refetchQueries; _i < refetchQueries_1.length; _i++) {\n                  var refetchQuery = refetchQueries_1[_i];\n\n                  if (typeof refetchQuery === 'string') {\n                    var promise = _this.refetchQueryByName(refetchQuery);\n\n                    if (promise) {\n                      refetchQueryPromises.push(promise);\n                    }\n\n                    continue;\n                  }\n\n                  var queryOptions = {\n                    query: refetchQuery.query,\n                    variables: refetchQuery.variables,\n                    fetchPolicy: 'network-only'\n                  };\n\n                  if (refetchQuery.context) {\n                    queryOptions.context = refetchQuery.context;\n                  }\n\n                  refetchQueryPromises.push(_this.query(queryOptions));\n                }\n\n                return Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                  _this.setQuery(mutationId, function () {\n                    return {\n                      document: null\n                    };\n                  });\n\n                  if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                    delete storeResult.errors;\n                  }\n\n                  return storeResult;\n                });\n              };\n\n              var clientQuery = _this.localState.clientQuery(operation.query);\n\n              var serverQuery = _this.localState.serverQuery(operation.query);\n\n              if (serverQuery) {\n                operation.query = serverQuery;\n              }\n\n              var obs = serverQuery ? execute(_this.link, operation) : Observable.of({\n                data: {}\n              });\n              var self = _this;\n              var _complete = false;\n              var handlingNext = false;\n              obs.subscribe({\n                next: function next(result) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var updatedResult, context, variables;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          handlingNext = true;\n\n                          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                            handlingNext = false;\n                            error = new ApolloError({\n                              graphQLErrors: result.errors\n                            });\n                            return [2];\n                          }\n\n                          self.mutationStore.markMutationResult(mutationId);\n                          updatedResult = result;\n                          context = operation.context, variables = operation.variables;\n                          if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                          return [4, self.localState.runResolvers({\n                            document: clientQuery,\n                            remoteResult: result,\n                            context: context,\n                            variables: variables\n                          }).catch(function (error) {\n                            handlingNext = false;\n                            reject(error);\n                            return result;\n                          })];\n\n                        case 1:\n                          updatedResult = _a.sent();\n                          _a.label = 2;\n\n                        case 2:\n                          if (fetchPolicy !== 'no-cache') {\n                            self.dataStore.markMutationResult({\n                              mutationId: mutationId,\n                              result: updatedResult,\n                              document: mutation,\n                              variables: updatedVariables || {},\n                              updateQueries: generateUpdateQueriesInfo(),\n                              update: updateWithProxyFn\n                            });\n                          }\n\n                          storeResult = updatedResult;\n                          handlingNext = false;\n\n                          if (_complete) {\n                            completeMutation().then(resolve, reject);\n                          }\n\n                          return [2];\n                      }\n                    });\n                  });\n                },\n                error: function error(err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n                  self.setQuery(mutationId, function () {\n                    return {\n                      document: null\n                    };\n                  });\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function complete() {\n                  if (!handlingNext) {\n                    completeMutation().then(resolve, reject);\n                  }\n\n                  _complete = true;\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, variables, _b, metadata, _c, fetchPolicy, _d, context, cache, query, updatedVariables, _e, updatedOptions, storeResult, needToFetch, _f, complete, result, shouldFetch, requestId, cancel, shouldDispatchClientResult, networkResult;\n\n      var _this = this;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            _a = options.variables, variables = _a === void 0 ? {} : _a, _b = options.metadata, metadata = _b === void 0 ? null : _b, _c = options.fetchPolicy, fetchPolicy = _c === void 0 ? 'cache-first' : _c, _d = options.context, context = _d === void 0 ? {} : _d;\n            cache = this.dataStore.getCache();\n            query = cache.transformDocument(options.query);\n            if (!hasClientExports(query)) return [3, 2];\n            return [4, this.localState.addExportedVariables(query, variables, context)];\n\n          case 1:\n            _e = _g.sent();\n            return [3, 3];\n\n          case 2:\n            _e = variables;\n            _g.label = 3;\n\n          case 3:\n            updatedVariables = _e;\n            updatedOptions = __assign({}, options, {\n              variables: updatedVariables\n            });\n            needToFetch = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n            if (fetchType !== FetchType.refetch && fetchPolicy !== 'network-only' && fetchPolicy !== 'no-cache') {\n              _f = this.dataStore.getCache().diff({\n                query: query,\n                variables: updatedVariables,\n                returnPartialData: true,\n                optimistic: false\n              }), complete = _f.complete, result = _f.result;\n              needToFetch = !complete || fetchPolicy === 'cache-and-network';\n              storeResult = result;\n            }\n\n            shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n            if (hasDirectives(['live'], query)) shouldFetch = true;\n            requestId = this.generateRequestId();\n            cancel = this.updateQueryWatch(queryId, query, updatedOptions);\n            this.setQuery(queryId, function () {\n              return {\n                document: query,\n                lastRequestId: requestId,\n                invalidated: true,\n                cancel: cancel\n              };\n            });\n            this.invalidate(true, fetchMoreForQueryId);\n            this.queryStore.initQuery({\n              queryId: queryId,\n              document: query,\n              storePreviousVariables: shouldFetch,\n              variables: updatedVariables,\n              isPoll: fetchType === FetchType.poll,\n              isRefetch: fetchType === FetchType.refetch,\n              metadata: metadata,\n              fetchMoreForQueryId: fetchMoreForQueryId\n            });\n            this.broadcastQueries();\n            shouldDispatchClientResult = !shouldFetch || fetchPolicy === 'cache-and-network';\n\n            if (shouldDispatchClientResult) {\n              this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n              this.invalidate(true, queryId, fetchMoreForQueryId);\n              this.broadcastQueries(this.localState.shouldForceResolvers(query));\n            }\n\n            if (shouldFetch) {\n              networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: updatedOptions,\n                fetchMoreForQueryId: fetchMoreForQueryId\n              }).catch(function (error) {\n                if (isApolloError(error)) {\n                  throw error;\n                } else {\n                  var lastRequestId = _this.getQuery(queryId).lastRequestId;\n\n                  if (requestId >= (lastRequestId || 1)) {\n                    _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n                    _this.invalidate(true, queryId, fetchMoreForQueryId);\n\n                    _this.broadcastQueries();\n                  }\n\n                  throw new ApolloError({\n                    networkError: error\n                  });\n                }\n              });\n\n              if (fetchPolicy !== 'cache-and-network') {\n                return [2, networkResult];\n              } else {\n                networkResult.catch(function () {});\n              }\n            }\n\n            return [2, Promise.resolve({\n              data: storeResult\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n\n    var previouslyHadError = false;\n    return function (queryStoreValue, newData, forceResolvers) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var observableQuery, fetchPolicy, errorPolicy, lastResult, lastError, shouldNotifyIfLoading, networkStatusChanged, errorStatusChanged, apolloError_1, data, isMissing, document_1, readResult, resultFromStore, query, variables, context, updatedResult, e_1, error_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.invalidate(false, queryId);\n              if (!queryStoreValue) return [2];\n              observableQuery = this.getQuery(queryId).observableQuery;\n              fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;\n              if (fetchPolicy === 'standby') return [2];\n              errorPolicy = observableQuery ? observableQuery.options.errorPolicy : options.errorPolicy;\n              lastResult = observableQuery ? observableQuery.getLastResult() : null;\n              lastError = observableQuery ? observableQuery.getLastError() : null;\n              shouldNotifyIfLoading = !newData && queryStoreValue.previousVariables != null || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n              networkStatusChanged = Boolean(lastResult && queryStoreValue.networkStatus !== lastResult.networkStatus);\n              errorStatusChanged = errorPolicy && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors && errorPolicy !== 'none';\n              if (!(!isNetworkRequestInFlight(queryStoreValue.networkStatus) || networkStatusChanged && options.notifyOnNetworkStatusChange || shouldNotifyIfLoading)) return [3, 8];\n\n              if ((!errorPolicy || errorPolicy === 'none') && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0 || queryStoreValue.networkError) {\n                apolloError_1 = new ApolloError({\n                  graphQLErrors: queryStoreValue.graphQLErrors,\n                  networkError: queryStoreValue.networkError\n                });\n                previouslyHadError = true;\n\n                if (observer.error) {\n                  try {\n                    observer.error(apolloError_1);\n                  } catch (e) {\n                    setTimeout(function () {\n                      throw e;\n                    }, 0);\n                  }\n                } else {\n                  setTimeout(function () {\n                    throw apolloError_1;\n                  }, 0);\n\n                  if (process.env.NODE_ENV !== 'production') {\n                    console.info('An unhandled error was thrown because no error handler is registered ' + 'for the query ' + JSON.stringify(queryStoreValue.document));\n                  }\n                }\n\n                return [2];\n              }\n\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 7,, 8]);\n\n              data = void 0;\n              isMissing = void 0;\n\n              if (newData) {\n                if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                  this.setQuery(queryId, function () {\n                    return {\n                      newData: null\n                    };\n                  });\n                }\n\n                data = newData.result;\n                isMissing = !newData.complete || false;\n              } else {\n                if (lastResult && lastResult.data && !errorStatusChanged) {\n                  data = lastResult.data;\n                  isMissing = false;\n                } else {\n                  document_1 = this.getQuery(queryId).document;\n                  readResult = this.dataStore.getCache().diff({\n                    query: document_1,\n                    variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n                    optimistic: true\n                  });\n                  data = readResult.result;\n                  isMissing = !readResult.complete;\n                }\n              }\n\n              resultFromStore = void 0;\n\n              if (isMissing && fetchPolicy !== 'cache-only') {\n                resultFromStore = {\n                  data: lastResult && lastResult.data,\n                  loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                  networkStatus: queryStoreValue.networkStatus,\n                  stale: true\n                };\n              } else {\n                resultFromStore = {\n                  data: data,\n                  loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n                  networkStatus: queryStoreValue.networkStatus,\n                  stale: false\n                };\n              }\n\n              if (errorPolicy === 'all' && queryStoreValue.graphQLErrors && queryStoreValue.graphQLErrors.length > 0) {\n                resultFromStore.errors = queryStoreValue.graphQLErrors;\n              }\n\n              if (!observer.next) return [3, 6];\n              if (!(previouslyHadError || !observableQuery || observableQuery.isDifferentFromLastResult(resultFromStore))) return [3, 6];\n              _a.label = 2;\n\n            case 2:\n              _a.trys.push([2, 5,, 6]);\n\n              if (!forceResolvers) return [3, 4];\n              query = options.query, variables = options.variables, context = options.context;\n              return [4, this.localState.runResolvers({\n                document: query,\n                remoteResult: resultFromStore,\n                context: context,\n                variables: variables,\n                onlyRunForcedResolvers: forceResolvers\n              })];\n\n            case 3:\n              updatedResult = _a.sent();\n              resultFromStore = __assign({}, resultFromStore, updatedResult);\n              _a.label = 4;\n\n            case 4:\n              observer.next(resultFromStore);\n              return [3, 6];\n\n            case 5:\n              e_1 = _a.sent();\n              setTimeout(function () {\n                throw e_1;\n              }, 0);\n              return [3, 6];\n\n            case 6:\n              previouslyHadError = false;\n              return [3, 8];\n\n            case 7:\n              error_1 = _a.sent();\n              previouslyHadError = true;\n              if (observer.error) observer.error(new ApolloError({\n                networkError: error_1\n              }));\n              return [2];\n\n            case 8:\n              return [2];\n          }\n        });\n      });\n    };\n  };\n\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby') : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    var queryDefinition = getQueryDefinition(options.query);\n\n    if (queryDefinition.variableDefinitions && queryDefinition.variableDefinitions.length) {\n      var defaultValues = getDefaultValues(queryDefinition);\n      options.variables = assign({}, defaultValues, options.variables);\n    }\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var transformedOptions = __assign({}, options);\n\n    return new ObservableQuery({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.query) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document') : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    return new Promise(function (resolve, reject) {\n      var watchedQuery = _this.watchQuery(options, false);\n\n      _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n\n      watchedQuery.result().then(resolve, reject).then(function () {\n        return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n      });\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    var queryId = this.idCounter.toString();\n    this.idCounter++;\n    return queryId;\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(true, queryId);\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var _b = _a.listeners,\n          listeners = _b === void 0 ? [] : _b;\n      return {\n        listeners: listeners.concat([listener]),\n        invalidated: false\n      };\n    });\n  };\n\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n\n    var previousResult = function previousResult() {\n      var previousResult = null;\n\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function callback(newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  };\n\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    });\n    var queryDef = getQueryDefinition(observableQuery.options.query);\n\n    if (queryDef.name && queryDef.name.value) {\n      var queryName = queryDef.name.value;\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n      this.queryIdsByName[queryName].push(observableQuery.queryId);\n    }\n  };\n\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var _a = this.getQuery(queryId),\n        observableQuery = _a.observableQuery,\n        cancel = _a.cancel;\n\n    if (cancel) cancel();\n    if (!observableQuery) return;\n    var definition = getQueryDefinition(observableQuery.options.query);\n    var queryName = definition.name ? definition.name.value : null;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n\n    if (queryName) {\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(function (val) {\n        return !(observableQuery.queryId === val);\n      });\n    }\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(new Error('Store reset while query was in flight(not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n    var reset = this.dataStore.reset();\n    return reset;\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var observableQueryPromises = this.getObservableQueryPromises(includeStandby);\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options).catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (options) {\n    var _this = this;\n\n    var query = options.query;\n    var isCacheEnabled = !(options.fetchPolicy && options.fetchPolicy === 'no-cache');\n    var cache = this.dataStore.getCache();\n    var transformedDoc = cache.transformDocument(query);\n    var variables = assign({}, getDefaultValues(getOperationDefinition(query)), options.variables);\n    var updatedVariables = variables;\n    var sub;\n    var observers = [];\n    var clientQuery = this.localState.clientQuery(transformedDoc);\n    return new Observable(function (observer) {\n      observers.push(observer);\n\n      if (observers.length === 1) {\n        var activeNextCalls_1 = 0;\n        var complete_1 = false;\n        var handler_1 = {\n          next: function next(result) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var updatedResult;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    activeNextCalls_1 += 1;\n                    updatedResult = result;\n                    if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                    return [4, this.localState.runResolvers({\n                      document: clientQuery,\n                      remoteResult: result,\n                      context: {},\n                      variables: updatedVariables\n                    })];\n\n                  case 1:\n                    updatedResult = _a.sent();\n                    _a.label = 2;\n\n                  case 2:\n                    if (isCacheEnabled) {\n                      this.dataStore.markSubscriptionResult(updatedResult, transformedDoc, updatedVariables);\n                      this.broadcastQueries();\n                    }\n\n                    observers.forEach(function (obs) {\n                      if (graphQLResultHasError(updatedResult) && obs.error) {\n                        obs.error(new ApolloError({\n                          graphQLErrors: updatedResult.errors\n                        }));\n                      } else if (obs.next) {\n                        obs.next(updatedResult);\n                      }\n\n                      activeNextCalls_1 -= 1;\n                    });\n\n                    if (activeNextCalls_1 === 0 && complete_1) {\n                      handler_1.complete();\n                    }\n\n                    return [2];\n                }\n              });\n            });\n          },\n          error: function error(_error3) {\n            observers.forEach(function (obs) {\n              if (obs.error) {\n                obs.error(_error3);\n              }\n            });\n          },\n          complete: function complete() {\n            if (activeNextCalls_1 === 0) {\n              observers.forEach(function (obs) {\n                if (obs.complete) {\n                  obs.complete();\n                }\n              });\n            }\n\n            complete_1 = true;\n          }\n        };\n\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var updatedVariables, _a, serverQuery, operation;\n\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  if (!hasClientExports(transformedDoc)) return [3, 2];\n                  return [4, this.localState.addExportedVariables(transformedDoc, variables)];\n\n                case 1:\n                  _a = _b.sent();\n                  return [3, 3];\n\n                case 2:\n                  _a = variables;\n                  _b.label = 3;\n\n                case 3:\n                  updatedVariables = _a;\n                  serverQuery = this.localState.serverQuery(transformedDoc);\n\n                  if (serverQuery) {\n                    operation = this.buildOperationForLink(serverQuery, updatedVariables);\n                    sub = execute(this.link, operation).subscribe(handler_1);\n                  } else {\n                    sub = Observable.of({\n                      data: {}\n                    }).subscribe(handler_1);\n                  }\n\n                  return [2];\n              }\n            });\n          });\n        })();\n      }\n\n      return function () {\n        observers = observers.filter(function (obs) {\n          return obs !== observer;\n        });\n\n        if (observers.length === 0 && sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    var subscriptions = this.getQuery(queryId).subscriptions;\n    this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n    this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n    subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query,\n        fetchPolicy = _a.fetchPolicy;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData;\n\n    if (newData && newData.complete) {\n      return {\n        data: newData.result,\n        partial: false\n      };\n    } else if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return {\n        data: undefined,\n        partial: false\n      };\n    } else {\n      try {\n        var data = this.dataStore.getCache().read({\n          query: query,\n          variables: variables,\n          previousResult: lastResult ? lastResult.data : undefined,\n          optimistic: optimistic\n        }) || undefined;\n        return {\n          data: data,\n          partial: false\n        };\n      } catch (e) {\n        return {\n          data: undefined,\n          partial: true\n        };\n      }\n    }\n  };\n\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n      process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    var _a = observableQuery.options,\n        variables = _a.variables,\n        query = _a.query;\n    var data = this.getCurrentQueryResult(observableQuery, false).data;\n    return {\n      previousResult: data,\n      variables: variables,\n      document: query\n    };\n  };\n\n  QueryManager.prototype.broadcastQueries = function (forceResolvers) {\n    var _this = this;\n\n    if (forceResolvers === void 0) {\n      forceResolvers = false;\n    }\n\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (!info.invalidated || !info.listeners) return;\n      info.listeners.filter(function (x) {\n        return !!x;\n      }).forEach(function (listener) {\n        listener(_this.queryStore.get(id), info.newData, forceResolvers);\n      });\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableQueryPromises = function (includeStandby) {\n    var _this = this;\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (!observableQuery) return;\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.setQuery(queryId, function () {\n        return {\n          newData: null\n        };\n      });\n\n      _this.invalidate(true, queryId);\n    });\n    return observableQueryPromises;\n  };\n\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n\n    var requestId = _a.requestId,\n        queryId = _a.queryId,\n        document = _a.document,\n        options = _a.options,\n        fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n        context = options.context,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? 'none' : _b,\n        fetchPolicy = options.fetchPolicy;\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      var obs;\n      var updatedContext = {};\n\n      var clientQuery = _this.localState.clientQuery(document);\n\n      var serverQuery = _this.localState.serverQuery(document);\n\n      if (serverQuery) {\n        var operation = _this.buildOperationForLink(serverQuery, variables, __assign({}, context, {\n          forceFetch: !_this.queryDeduplication\n        }));\n\n        updatedContext = operation.context;\n        obs = execute(_this.deduplicator, operation);\n      } else {\n        updatedContext = _this.prepareContext(context);\n        obs = Observable.of({\n          data: {}\n        });\n      }\n\n      _this.fetchQueryRejectFns.set(\"fetchRequest:\" + queryId, reject);\n\n      var _complete2 = false;\n      var handlingNext = true;\n      var subscriber = {\n        next: function next(result) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var updatedResult, lastRequestId;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  handlingNext = true;\n                  updatedResult = result;\n                  lastRequestId = this.getQuery(queryId).lastRequestId;\n                  if (!(requestId >= (lastRequestId || 1))) return [3, 3];\n                  if (!(clientQuery && hasDirectives(['client'], clientQuery))) return [3, 2];\n                  return [4, this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: updatedContext,\n                    variables: variables\n                  }).catch(function (error) {\n                    handlingNext = false;\n                    reject(error);\n                    return result;\n                  })];\n\n                case 1:\n                  updatedResult = _a.sent();\n                  _a.label = 2;\n\n                case 2:\n                  if (fetchPolicy !== 'no-cache') {\n                    try {\n                      this.dataStore.markQueryResult(updatedResult, document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n                    } catch (e) {\n                      handlingNext = false;\n                      reject(e);\n                      return [2];\n                    }\n                  } else {\n                    this.setQuery(queryId, function () {\n                      return {\n                        newData: {\n                          result: updatedResult.data,\n                          complete: true\n                        }\n                      };\n                    });\n                  }\n\n                  this.queryStore.markQueryResult(queryId, updatedResult, fetchMoreForQueryId);\n                  this.invalidate(true, queryId, fetchMoreForQueryId);\n                  this.broadcastQueries();\n                  _a.label = 3;\n\n                case 3:\n                  if (updatedResult.errors && errorPolicy === 'none') {\n                    handlingNext = false;\n                    reject(new ApolloError({\n                      graphQLErrors: updatedResult.errors\n                    }));\n                    return [2];\n                  } else if (errorPolicy === 'all') {\n                    errorsFromStore = updatedResult.errors;\n                  }\n\n                  if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = updatedResult.data;\n                  } else {\n                    try {\n                      resultFromStore = this.dataStore.getCache().read({\n                        variables: variables,\n                        query: document,\n                        optimistic: false\n                      });\n                    } catch (e) {}\n                  }\n\n                  handlingNext = false;\n\n                  if (_complete2) {\n                    subscriber.complete();\n                  }\n\n                  return [2];\n              }\n            });\n          });\n        },\n        error: function error(_error4) {\n          _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n\n          _this.setQuery(queryId, function (_a) {\n            var subscriptions = _a.subscriptions;\n            return {\n              subscriptions: subscriptions.filter(function (x) {\n                return x !== subscription;\n              })\n            };\n          });\n\n          reject(_error4);\n        },\n        complete: function complete() {\n          if (!handlingNext) {\n            _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n\n            _this.setQuery(queryId, function (_a) {\n              var subscriptions = _a.subscriptions;\n              return {\n                subscriptions: subscriptions.filter(function (x) {\n                  return x !== subscription;\n                })\n              };\n            });\n\n            resolve({\n              data: resultFromStore,\n              errors: errorsFromStore,\n              loading: false,\n              networkStatus: NetworkStatus.ready,\n              stale: false\n            });\n          }\n\n          _complete2 = true;\n        }\n      };\n      var subscription = obs.subscribe(subscriber);\n\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        return {\n          subscriptions: subscriptions.concat([subscription])\n        };\n      });\n    }).catch(function (error) {\n      _this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.refetchQueryByName = function (queryName) {\n    var _this = this;\n\n    var refetchedQueries = this.queryIdsByName[queryName];\n    if (refetchedQueries === undefined) return;\n    return Promise.all(refetchedQueries.map(function (id) {\n      return _this.getQuery(id).observableQuery;\n    }).filter(function (x) {\n      return !!x;\n    }).map(function (x) {\n      return x.refetch();\n    }));\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    var requestId = this.idCounter;\n    this.idCounter++;\n    return requestId;\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || {\n      listeners: [],\n      invalidated: false,\n      document: null,\n      newData: null,\n      lastRequestId: null,\n      observableQuery: null,\n      subscriptions: []\n    };\n  };\n\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n\n    var newInfo = __assign({}, prev, updater(prev));\n\n    this.queries.set(queryId, newInfo);\n  };\n\n  QueryManager.prototype.invalidate = function (invalidated, queryId, fetchMoreForQueryId) {\n    if (queryId) this.setQuery(queryId, function () {\n      return {\n        invalidated: invalidated\n      };\n    });\n\n    if (fetchMoreForQueryId) {\n      this.setQuery(fetchMoreForQueryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n\n  QueryManager.prototype.buildOperationForLink = function (document, variables, extraContext) {\n    var cache = this.dataStore.getCache();\n    return {\n      query: cache.transformForLink ? cache.transformForLink(document) : document,\n      variables: variables,\n      operationName: getOperationName(document) || undefined,\n      context: this.prepareContext(extraContext)\n    };\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign({}, newContext, {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n    var pollInterval = options.pollInterval;\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n\n    if (!this.ssrMode) {\n      this.pollingInfoByQueryId.set(queryId, {\n        interval: pollInterval,\n        lastPollTimeMs: Date.now() - 10,\n        options: __assign({}, options, {\n          fetchPolicy: 'network-only'\n        })\n      });\n\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n\n      this.schedulePoll(pollInterval);\n    }\n\n    return queryId;\n  };\n\n  QueryManager.prototype.stopPollingQuery = function (queryId) {\n    this.pollingInfoByQueryId.delete(queryId);\n  };\n\n  QueryManager.prototype.schedulePoll = function (timeLimitMs) {\n    var _this = this;\n\n    var now = Date.now();\n\n    if (this.nextPoll) {\n      if (timeLimitMs < this.nextPoll.time - now) {\n        clearTimeout(this.nextPoll.timeout);\n      } else {\n        return;\n      }\n    }\n\n    this.nextPoll = {\n      time: now + timeLimitMs,\n      timeout: setTimeout(function () {\n        _this.nextPoll = null;\n        var nextTimeLimitMs = Infinity;\n\n        _this.pollingInfoByQueryId.forEach(function (info, queryId) {\n          if (info.interval < nextTimeLimitMs) {\n            nextTimeLimitMs = info.interval;\n          }\n\n          if (!_this.checkInFlight(queryId)) {\n            if (Date.now() - info.lastPollTimeMs >= info.interval) {\n              var updateLastPollTime = function updateLastPollTime() {\n                info.lastPollTimeMs = Date.now();\n              };\n\n              _this.fetchQuery(queryId, info.options, FetchType.poll).then(updateLastPollTime, updateLastPollTime);\n            }\n          }\n        });\n\n        if (isFinite(nextTimeLimitMs)) {\n          _this.schedulePoll(nextTimeLimitMs);\n        }\n      }, timeLimitMs)\n    };\n  };\n\n  return QueryManager;\n}();\n\nvar DataStore = function () {\n  function DataStore(initialCache) {\n    this.cache = initialCache;\n  }\n\n  DataStore.prototype.getCache = function () {\n    return this.cache;\n  };\n\n  DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n    if (ignoreErrors === void 0) {\n      ignoreErrors = false;\n    }\n\n    var writeWithErrors = !graphQLResultHasError(result);\n\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n\n  DataStore.prototype.markMutationInit = function (mutation) {\n    var _this = this;\n\n    if (mutation.optimisticResponse) {\n      var optimistic_1;\n\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic_1 = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic_1 = mutation.optimisticResponse;\n      }\n\n      var changeFn_1 = function changeFn_1() {\n        _this.markMutationResult({\n          mutationId: mutation.mutationId,\n          result: {\n            data: optimistic_1\n          },\n          document: mutation.document,\n          variables: mutation.variables,\n          updateQueries: mutation.updateQueries,\n          update: mutation.update\n        });\n      };\n\n      this.cache.recordOptimisticTransaction(function (c) {\n        var orig = _this.cache;\n        _this.cache = c;\n\n        try {\n          changeFn_1();\n        } finally {\n          _this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  };\n\n  DataStore.prototype.markMutationResult = function (mutation) {\n    var _this = this;\n\n    if (!graphQLResultHasError(mutation.result)) {\n      var cacheWrites_1 = [];\n      cacheWrites_1.push({\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n\n      if (mutation.updateQueries) {\n        Object.keys(mutation.updateQueries).filter(function (id) {\n          return mutation.updateQueries[id];\n        }).forEach(function (queryId) {\n          var _a = mutation.updateQueries[queryId],\n              query = _a.query,\n              updater = _a.updater;\n\n          var _b = _this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _b.result,\n              complete = _b.complete;\n\n          if (!complete) {\n            return;\n          }\n\n          var nextQueryResult = tryFunctionOrLogError(function () {\n            return updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: getOperationName(query.document) || undefined,\n              queryVariables: query.variables\n            });\n          });\n\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: query.document,\n              variables: query.variables\n            });\n          }\n        });\n      }\n\n      this.cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n      });\n      var update_1 = mutation.update;\n\n      if (update_1) {\n        this.cache.performTransaction(function (c) {\n          tryFunctionOrLogError(function () {\n            return update_1(c, mutation.result);\n          });\n        });\n      }\n    }\n  };\n\n  DataStore.prototype.markMutationComplete = function (_a) {\n    var mutationId = _a.mutationId,\n        optimisticResponse = _a.optimisticResponse;\n    if (!optimisticResponse) return;\n    this.cache.removeOptimistic(mutationId);\n  };\n\n  DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables: variables,\n      query: document\n    });\n  };\n\n  DataStore.prototype.reset = function () {\n    return this.cache.reset();\n  };\n\n  return DataStore;\n}();\n\nvar version = \"2.5.1\";\nvar hasSuggestedDevtools = false;\n\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    this.clientAwareness = {};\n    var cache = options.cache,\n        _a = options.ssrMode,\n        ssrMode = _a === void 0 ? false : _a,\n        _b = options.ssrForceFetchDelay,\n        ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n        connectToDevTools = options.connectToDevTools,\n        _c = options.queryDeduplication,\n        queryDeduplication = _c === void 0 ? true : _c,\n        defaultOptions = options.defaultOptions,\n        resolvers = options.resolvers,\n        typeDefs = options.typeDefs,\n        fragmentMatcher = options.fragmentMatcher,\n        clientAwarenessName = options.name,\n        clientAwarenessVersion = options.version;\n    var link = options.link;\n\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n\n    if (!link || !cache) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError() : new InvariantError(\"\\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\\n        For more information, please visit:\\n          https://www.apollographql.com/docs/react/basics/setup.html\\n        to help you get started.\\n      \");\n    }\n\n    var supportedCache = new Map();\n    var supportedDirectives = new ApolloLink(function (operation, forward) {\n      var result = supportedCache.get(operation.query);\n\n      if (!result) {\n        result = removeConnectionDirectiveFromDocument(operation.query);\n        supportedCache.set(operation.query, result);\n        supportedCache.set(result, result);\n      }\n\n      operation.query = result;\n      return forward(operation);\n    });\n    this.link = supportedDirectives.concat(link);\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.ssrMode = ssrMode;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n\n    this.version = version;\n\n    if (clientAwarenessName) {\n      this.clientAwareness.name = clientAwarenessName;\n    }\n\n    if (clientAwarenessVersion) {\n      this.clientAwareness.version = clientAwarenessVersion;\n    }\n\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n  }\n\n  ApolloClient.prototype.stop = function () {\n    if (this.queryManager) {\n      this.queryManager.stop();\n    }\n  };\n\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = __assign({}, this.defaultOptions.watchQuery, options);\n    }\n\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign({}, options, {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.initQueryManager().watchQuery(options);\n  };\n\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = __assign({}, this.defaultOptions.query, options);\n    }\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network') : invariant(options.fetchPolicy !== 'cache-and-network', 'cache-and-network fetchPolicy can only be used with watchQuery');\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign({}, options, {\n        fetchPolicy: 'cache-first'\n      });\n    }\n\n    return this.initQueryManager().query(options);\n  };\n\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = __assign({}, this.defaultOptions.mutate, options);\n    }\n\n    return this.initQueryManager().mutate(options);\n  };\n\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.initQueryManager().startGraphQLSubscription(options);\n  };\n\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.initProxy().readQuery(options, optimistic);\n  };\n\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.initProxy().readFragment(options, optimistic);\n  };\n\n  ApolloClient.prototype.writeQuery = function (options) {\n    var result = this.initProxy().writeQuery(options);\n    this.initQueryManager().broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.writeFragment = function (options) {\n    var result = this.initProxy().writeFragment(options);\n    this.initQueryManager().broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.writeData = function (options) {\n    var result = this.initProxy().writeData(options);\n    this.initQueryManager().broadcastQueries();\n    return result;\n  };\n\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n\n  ApolloClient.prototype.initQueryManager = function () {\n    var _this = this;\n\n    if (!this.queryManager) {\n      this.queryManager = new QueryManager({\n        link: this.link,\n        store: this.store,\n        queryDeduplication: this.queryDeduplication,\n        ssrMode: this.ssrMode,\n        clientAwareness: this.clientAwareness,\n        localState: this.localState,\n        onBroadcast: function onBroadcast() {\n          if (_this.devToolsHookCb) {\n            _this.devToolsHookCb({\n              action: {},\n              state: {\n                queries: _this.queryManager ? _this.queryManager.queryStore.getStore() : {},\n                mutations: _this.queryManager ? _this.queryManager.mutationStore.getStore() : {}\n              },\n              dataWithOptimisticResults: _this.cache.extract(true)\n            });\n          }\n        }\n      });\n    }\n\n    return this.queryManager;\n  };\n\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.queryManager ? _this.queryManager.clearStore() : Promise.resolve(null);\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.queryManager && _this.queryManager.reFetchObservableQueries ? _this.queryManager.reFetchObservableQueries() : Promise.resolve(null);\n    });\n  };\n\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n\n    var queryManager = this.queryManager;\n    return Promise.resolve().then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return queryManager ? queryManager.clearStore() : Promise.resolve(null);\n    });\n  };\n\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager ? this.queryManager.reFetchObservableQueries(includeStandby) : Promise.resolve(null);\n  };\n\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.initProxy().extract(optimistic);\n  };\n\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.initProxy().restore(serializedState);\n  };\n\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n\n  ApolloClient.prototype.initProxy = function () {\n    if (!this.proxy) {\n      this.initQueryManager();\n      this.proxy = this.cache;\n    }\n\n    return this.proxy;\n  };\n\n  return ApolloClient;\n}();\n\nexport default ApolloClient;\nexport { ApolloClient, ObservableQuery, NetworkStatus, isApolloError, ApolloError, FetchType };","map":{"version":3,"sources":["../src/core/networkStatus.ts","../src/util/Observable.ts","../src/errors/ApolloError.ts","../src/core/types.ts","../src/core/ObservableQuery.ts","../src/data/mutations.ts","../src/data/queries.ts","../src/util/capitalizeFirstLetter.ts","../src/core/LocalState.ts","../src/core/QueryManager.ts","../src/data/store.ts","../src/version.ts","../src/ApolloClient.ts"],"names":["LinkObservable","tslib_1.__assign","Deduplicator"],"mappings":"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","sourcesContent":["/**\n * The current status of a query’s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus: NetworkStatus,\n): boolean {\n  return networkStatus < 7;\n}\n","// This simplified polyfill attempts to follow the ECMAScript Observable proposal.\n// See https://github.com/zenparsing/es-observable\nimport { Observable as LinkObservable } from 'apollo-link';\n\nexport type Subscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\n\nimport $$observable from 'symbol-observable';\n\n// rxjs interopt\nexport class Observable<T> extends LinkObservable<T> {\n  public [$$observable]() {\n    return this;\n  }\n\n  public ['@@observable' as any]() {\n    return this;\n  }\n}\n","import { GraphQLError } from 'graphql';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (Array.isArray(err.graphQLErrors) && err.graphQLErrors.length !== 0) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `GraphQL error: ${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      this.message = generateErrorMessage(this);\n    } else {\n      this.message = errorMessage;\n    }\n\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n","import { FetchResult } from 'apollo-link';\nimport { DocumentNode, GraphQLError } from 'graphql';\n\nimport { QueryStoreValue } from '../data/queries';\nimport { NetworkStatus } from './networkStatus';\n\nexport type QueryListener = (\n  queryStoreValue: QueryStoreValue,\n  newData?: any,\n  forceResolvers?: boolean,\n) => void;\n\nexport type OperationVariables = { [key: string]: any };\n\nexport type PureQueryOptions = {\n  query: DocumentNode;\n  variables?: { [key: string]: any };\n  context?: any;\n};\n\nexport type ApolloQueryResult<T> = {\n  data: T;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  stale: boolean;\n};\n\nexport enum FetchType {\n  normal = 1,\n  refetch = 2,\n  poll = 3,\n}\n\n// This is part of the public API, people write these functions in `updateQueries`.\nexport type MutationQueryReducer<T> = (\n  previousResult: Record<string, any>,\n  options: {\n    mutationResult: FetchResult<T>;\n    queryName: string | undefined;\n    queryVariables: Record<string, any>;\n  },\n) => Record<string, any>;\n\nexport type MutationQueryReducersMap<T = { [key: string]: any }> = {\n  [queryName: string]: MutationQueryReducer<T>;\n};\n\nexport interface Resolvers {\n  [key: string]: {\n    [field: string]: (\n      rootValue?: any,\n      args?: any,\n      context?: any,\n      info?: any,\n    ) => any;\n  };\n}\n","import { isEqual, tryFunctionOrLogError, cloneDeep } from 'apollo-utilities';\nimport { GraphQLError } from 'graphql';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable, Observer, Subscription } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, FetchType, OperationVariables } from './types';\nimport {\n  ModifiableWatchQueryOptions,\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ErrorPolicy,\n  UpdateQueryFn,\n} from './watchQueryOptions';\n\nimport { QueryStoreValue } from '../data/queries';\n\nimport { invariant } from 'ts-invariant';\n\n// XXX remove in the next breaking semver change (3.0)\n// Deprecated, use ApolloCurrentQueryResult\nexport type ApolloCurrentResult<T> = {\n  data: T | {};\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n};\n\nexport type ApolloCurrentQueryResult<T> = {\n  data: T | undefined;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n  stale?: boolean;\n};\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nexport const hasError = (\n  storeValue: QueryStoreValue,\n  policy: ErrorPolicy = 'none',\n) =>\n  storeValue &&\n  ((storeValue.graphQLErrors &&\n    storeValue.graphQLErrors.length > 0 &&\n    policy === 'none') ||\n    storeValue.networkError);\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public options: WatchQueryOptions<TVariables>;\n  public queryId: string;\n  /**\n   *\n   * The current value of the variables for this query. Can change.\n   */\n  public variables: TVariables;\n\n  private shouldSubscribe: boolean;\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers: Observer<ApolloQueryResult<TData>>[];\n  private subscriptionHandles: Subscription[];\n\n  private lastResult: ApolloQueryResult<TData>;\n  private lastResultSnapshot: ApolloQueryResult<TData>;\n  private lastError: ApolloError;\n\n  constructor({\n    queryManager,\n    options,\n    shouldSubscribe = true,\n  }: {\n    queryManager: QueryManager<any>;\n    options: WatchQueryOptions<TVariables>;\n    shouldSubscribe?: boolean;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) =>\n      this.onSubscribe(observer),\n    );\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.variables = options.variables || ({} as TVariables);\n    this.queryId = queryManager.generateQueryId();\n    this.shouldSubscribe = shouldSubscribe;\n\n    // related classes\n    this.queryManager = queryManager;\n\n    // interal data stores\n    this.observers = [];\n    this.subscriptionHandles = [];\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    const that = this;\n    return new Promise((resolve, reject) => {\n      let subscription: Subscription;\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next(result: ApolloQueryResult<TData>) {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          if (!that.observers.some(obs => obs !== observer)) {\n            that.queryManager.removeQuery(that.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error(error: any) {\n          reject(error);\n        },\n      };\n      subscription = that.subscribe(observer);\n    });\n  }\n\n  // XXX remove in the next breaking semver change (3.0)\n  // Deprecated, use getCurrentResult()\n  public currentResult(): ApolloCurrentResult<TData> {\n    const result = this.getCurrentResult() as ApolloCurrentResult<TData>;\n    if (result.data === undefined) {\n      result.data = {};\n    }\n    return result;\n  }\n\n  /**\n   * Return the result of the query from the local cache as well as some fetching status\n   * `loading` and `networkStatus` allow to know if a request is in flight\n   * `partial` lets you know if the result from the local cache is complete or partial\n   * @return {data: Object, error: ApolloError, loading: boolean, networkStatus: number, partial: boolean}\n   */\n  public getCurrentResult(): ApolloCurrentQueryResult<TData> {\n    if (this.isTornDown) {\n      return {\n        data: this.lastError\n          ? undefined\n          : this.lastResult\n          ? this.lastResult.data\n          : undefined,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      };\n    }\n\n    const queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n\n    if (hasError(queryStoreValue, this.options.errorPolicy)) {\n      return {\n        data: undefined,\n        loading: false,\n        networkStatus: queryStoreValue.networkStatus,\n        error: new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError,\n        }),\n      };\n    }\n\n    // Variables might have been added dynamically at query time, when\n    // using `@client @export(as: \"varname\")` for example. When this happens,\n    // the variables have been updated in the query store, but not updated on\n    // the original `ObservableQuery`. We'll update the observable query\n    // variables here to match, so retrieving from the cache doesn't fail.\n    if (queryStoreValue && queryStoreValue.variables) {\n      this.options.variables = Object.assign(\n        {},\n        this.options.variables,\n        queryStoreValue.variables,\n      );\n    }\n\n    const { data, partial } = this.queryManager.getCurrentQueryResult(this);\n\n    const queryLoading =\n      !queryStoreValue ||\n      queryStoreValue.networkStatus === NetworkStatus.loading;\n\n    // We need to be careful about the loading state we show to the user, to try\n    // and be vaguely in line with what the user would have seen from .subscribe()\n    // but to still provide useful information synchronously when the query\n    // will not end up hitting the server.\n    // See more: https://github.com/apollostack/apollo-client/issues/707\n    // Basically: is there a query in flight right now (modolo the next tick)?\n    const loading =\n      (this.options.fetchPolicy === 'network-only' && queryLoading) ||\n      (partial && this.options.fetchPolicy !== 'cache-only');\n\n    // if there is nothing in the query store, it means this query hasn't fired yet or it has been cleaned up. Therefore the\n    // network status is dependent on queryLoading.\n    let networkStatus: NetworkStatus;\n    if (queryStoreValue) {\n      networkStatus = queryStoreValue.networkStatus;\n    } else {\n      networkStatus = loading ? NetworkStatus.loading : NetworkStatus.ready;\n    }\n\n    const result = {\n      data,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    if (\n      queryStoreValue &&\n      queryStoreValue.graphQLErrors &&\n      this.options.errorPolicy === 'all'\n    ) {\n      result.errors = queryStoreValue.graphQLErrors;\n    }\n\n    if (!partial) {\n      this.lastResult = { ...result, stale: false };\n      this.lastResultSnapshot = cloneDeep(this.lastResult);\n    }\n\n    return { ...result, partial };\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    const { lastResultSnapshot: snapshot } = this;\n    return !(\n      snapshot &&\n      newResult &&\n      snapshot.networkStatus === newResult.networkStatus &&\n      snapshot.stale === newResult.stale &&\n      isEqual(snapshot.data, newResult.data)\n    );\n  }\n\n  // Returns the last result that observer.next was called with. This is not the same as\n  // getCurrentResult! If you're not sure which you need, then you probably need getCurrentResult.\n  public getLastResult(): ApolloQueryResult<TData> {\n    return this.lastResult;\n  }\n\n  public getLastError(): ApolloError {\n    return this.lastError;\n  }\n\n  public resetLastResults(): void {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: TVariables): Promise<ApolloQueryResult<TData>> {\n    const { fetchPolicy } = this.options;\n    // early return if trying to read from cache during refetch\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(\n        new Error(\n          'cache-only fetchPolicy option should not be used together with query refetch.',\n        ),\n      );\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      // update observable variables\n      this.variables = Object.assign({}, this.variables, variables);\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      // Update the existing options with new variables\n      this.options.variables = Object.assign(\n        {},\n        this.options.variables,\n        this.variables,\n      );\n    }\n\n    // Override fetchPolicy for this call only\n    // only network-only and no-cache are safe to use\n    const isNetworkFetchPolicy =\n      fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    const combinedOptions: WatchQueryOptions = {\n      ...this.options,\n      fetchPolicy: isNetworkFetchPolicy ? fetchPolicy : 'network-only',\n    };\n\n    return this.queryManager\n      .fetchQuery(this.queryId, combinedOptions, FetchType.refetch)\n      .then(result => result as ApolloQueryResult<TData>);\n  }\n\n  public fetchMore<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    // early return if no update Query\n    invariant(fetchMoreOptions.updateQuery,\n      'updateQuery option is required. This function defines how to update the query data with the new results.',\n    );\n\n    let combinedOptions: any;\n\n    return Promise.resolve()\n      .then(() => {\n        const qid = this.queryManager.generateQueryId();\n\n        if (fetchMoreOptions.query) {\n          // fetch a new query\n          combinedOptions = fetchMoreOptions;\n        } else {\n          // fetch the same query with a possibly new variables\n          combinedOptions = {\n            ...this.options,\n            ...fetchMoreOptions,\n            variables: Object.assign(\n              {},\n              this.variables,\n              fetchMoreOptions.variables,\n            ),\n          };\n        }\n\n        combinedOptions.fetchPolicy = 'network-only';\n\n        return this.queryManager.fetchQuery(\n          qid,\n          combinedOptions as WatchQueryOptions,\n          FetchType.normal,\n          this.queryId,\n        );\n      })\n      .then(fetchMoreResult => {\n        this.updateQuery((previousResult: any) =>\n          fetchMoreOptions.updateQuery(previousResult, {\n            fetchMoreResult: fetchMoreResult.data as TData,\n            variables: combinedOptions.variables,\n          }),\n        );\n\n        return fetchMoreResult as ApolloQueryResult<TData>;\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<TSubscriptionData = TData>(\n    options: SubscribeToMoreOptions<TData, TVariables, TSubscriptionData>,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          if (options.updateQuery) {\n            this.updateQuery((previous, { variables }) =>\n              (options.updateQuery as UpdateQueryFn<\n                TData,\n                TVariables,\n                TSubscriptionData\n              >)(previous, {\n                subscriptionData,\n                variables,\n              }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          console.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptionHandles.push(subscription);\n\n    return () => {\n      const i = this.subscriptionHandles.indexOf(subscription);\n      if (i >= 0) {\n        this.subscriptionHandles.splice(i, 1);\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  // Note: if the query is not active (there are no subscribers), the promise\n  // will return null immediately.\n  public setOptions(\n    opts: ModifiableWatchQueryOptions,\n  ): Promise<ApolloQueryResult<TData>> {\n    const oldOptions = this.options;\n    this.options = Object.assign({}, this.options, opts) as WatchQueryOptions<\n      TVariables\n    >;\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    // If fetchPolicy went from cache-only to something else, or from something else to network-only\n    const tryFetch: boolean =\n      (oldOptions.fetchPolicy !== 'network-only' &&\n        opts.fetchPolicy === 'network-only') ||\n      (oldOptions.fetchPolicy === 'cache-only' &&\n        opts.fetchPolicy !== 'cache-only') ||\n      (oldOptions.fetchPolicy === 'standby' &&\n        opts.fetchPolicy !== 'standby') ||\n      false;\n\n    return this.setVariables(\n      this.options.variables as TVariables,\n      tryFetch,\n      opts.fetchResults,\n    );\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   *\n   * @param fetchResults: Option to ignore fetching results when updating variables\n   */\n  public setVariables(\n    variables: TVariables,\n    tryFetch: boolean = false,\n    fetchResults = true,\n  ): Promise<ApolloQueryResult<TData>> {\n    // since setVariables restarts the subscription, we reset the tornDown status\n    this.isTornDown = false;\n\n    const newVariables = variables ? variables : this.variables;\n\n    if (isEqual(newVariables, this.variables) && !tryFetch) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      if (this.observers.length === 0 || !fetchResults) {\n        return new Promise(resolve => resolve());\n      }\n      return this.result();\n    } else {\n      this.variables = newVariables;\n      this.options.variables = newVariables;\n\n      // See comment above\n      if (this.observers.length === 0) {\n        return new Promise(resolve => resolve());\n      }\n\n      // Use the same options as before, but with new variables\n      return this.queryManager\n        .fetchQuery(this.queryId, {\n          ...this.options,\n          variables: this.variables,\n        } as WatchQueryOptions)\n        .then(result => result as ApolloQueryResult<TData>);\n    }\n  }\n\n  public updateQuery(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVariables>,\n    ) => TData,\n  ): void {\n    const {\n      previousResult,\n      variables,\n      document,\n    } = this.queryManager.getQueryWithPreviousResult(this.queryId);\n\n    const newResult = tryFunctionOrLogError(() =>\n      mapFn(previousResult, { variables: variables as TVariables }),\n    );\n\n    if (newResult) {\n      this.queryManager.dataStore.markUpdateQueryResult(\n        document,\n        variables,\n        newResult,\n      );\n      this.queryManager.broadcastQueries();\n    }\n  }\n\n  public stopPolling() {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  }\n\n  public startPolling(pollInterval: number) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  }\n\n  private onSubscribe(observer: Observer<ApolloQueryResult<TData>>) {\n    // Zen Observable has its own error function, in order to log correctly\n    // we need to declare a custom error if nothing is passed\n    if (\n      (observer as any)._subscription &&\n      (observer as any)._subscription._observer &&\n      !(observer as any)._subscription._observer.error\n    ) {\n      (observer as any)._subscription._observer.error = (\n        error: ApolloError,\n      ) => {\n        console.error('Unhandled error', error.message, error.stack);\n      };\n    }\n\n    this.observers.push(observer);\n\n    // Deliver initial result\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    // setup the query if it hasn't been done before\n    if (this.observers.length === 1) this.setUpQuery();\n\n    return () => {\n      this.observers = this.observers.filter(obs => obs !== observer);\n\n      if (this.observers.length === 0) {\n        this.tearDownQuery();\n      }\n    };\n  }\n\n  private setUpQuery() {\n    if (this.shouldSubscribe) {\n      this.queryManager.addObservableQuery<TData>(this.queryId, this);\n    }\n\n    if (!!this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      this.queryManager.startPollingQuery(this.options, this.queryId);\n    }\n\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result: ApolloQueryResult<TData>) => {\n        this.lastResult = result;\n        this.lastResultSnapshot = cloneDeep(result);\n        this.observers.forEach(obs => obs.next && obs.next(result));\n      },\n      error: (error: ApolloError) => {\n        this.lastError = error;\n        this.observers.forEach(obs => obs.error && obs.error(error));\n      },\n    };\n\n    this.queryManager.startQuery<TData>(\n      this.queryId,\n      this.options,\n      this.queryManager.queryListenerForObserver(\n        this.queryId,\n        this.options,\n        observer,\n      ),\n    );\n  }\n\n  private tearDownQuery() {\n    this.isTornDown = true;\n    this.queryManager.stopPollingQuery(this.queryId);\n\n    // stop all active GraphQL subscriptions\n    this.subscriptionHandles.forEach(sub => sub.unsubscribe());\n    this.subscriptionHandles = [];\n\n    this.queryManager.removeObservableQuery(this.queryId);\n\n    this.queryManager.stopQuery(this.queryId);\n\n    this.observers = [];\n  }\n}\n\nfunction assertNotCacheFirstOrOnly<TData, TVariables>(\n  obsQuery: ObservableQuery<TData, TVariables>,\n) {\n  const { fetchPolicy } = obsQuery.options;\n  invariant(\n    fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only',\n    'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.',\n  );\n}\n","import { DocumentNode } from 'graphql';\n\nexport class MutationStore {\n  private store: { [mutationId: string]: MutationStoreValue } = {};\n\n  public getStore(): { [mutationId: string]: MutationStoreValue } {\n    return this.store;\n  }\n\n  public get(mutationId: string): MutationStoreValue {\n    return this.store[mutationId];\n  }\n\n  public initMutation(\n    mutationId: string,\n    mutation: DocumentNode,\n    variables: Object | undefined,\n  ) {\n    this.store[mutationId] = {\n      mutation,\n      variables: variables || {},\n      loading: true,\n      error: null,\n    };\n  }\n\n  public markMutationError(mutationId: string, error: Error) {\n    const mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = error;\n  }\n\n  public markMutationResult(mutationId: string) {\n    const mutation = this.store[mutationId];\n\n    if (!mutation) {\n      return;\n    }\n\n    mutation.loading = false;\n    mutation.error = null;\n  }\n\n  public reset() {\n    this.store = {};\n  }\n}\n\nexport interface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Object;\n  loading: boolean;\n  error: Error | null;\n}\n","import { DocumentNode, GraphQLError, ExecutionResult } from 'graphql';\nimport { isEqual } from 'apollo-utilities';\nimport { InvariantError } from 'ts-invariant';\nimport { NetworkStatus } from '../core/networkStatus';\n\nexport type QueryStoreValue = {\n  document: DocumentNode;\n  variables: Object;\n  previousVariables?: Object | null;\n  networkStatus: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  metadata: any;\n};\n\nexport class QueryStore {\n  private store: { [queryId: string]: QueryStoreValue } = {};\n\n  public getStore(): { [queryId: string]: QueryStoreValue } {\n    return this.store;\n  }\n\n  public get(queryId: string): QueryStoreValue {\n    return this.store[queryId];\n  }\n\n  public initQuery(query: {\n    queryId: string;\n    document: DocumentNode;\n    storePreviousVariables: boolean;\n    variables: Object;\n    isPoll: boolean;\n    isRefetch: boolean;\n    metadata: any;\n    fetchMoreForQueryId: string | undefined;\n  }) {\n    const previousQuery = this.store[query.queryId];\n\n    if (\n      previousQuery &&\n      previousQuery.document !== query.document &&\n      !isEqual(previousQuery.document, query.document)\n    ) {\n      // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.\n      // we should implement a separate action for refetching so that QUERY_INIT may never overwrite\n      // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)\n      throw new InvariantError(\n        'Internal Error: may not update existing query string in store',\n      );\n    }\n\n    let isSetVariables = false;\n\n    let previousVariables: Object | null = null;\n    if (\n      query.storePreviousVariables &&\n      previousQuery &&\n      previousQuery.networkStatus !== NetworkStatus.loading\n      // if the previous query was still loading, we don't want to remember it at all.\n    ) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    // TODO break this out into a separate function\n    let networkStatus;\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n      // TODO: can we determine setVariables here if it's a refetch and the variables have changed?\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    let graphQLErrors: ReadonlyArray<GraphQLError> = [];\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite\n    // the store. We probably want a refetch action instead, because I suspect that if you refetch\n    // before the initial fetch is done, you'll get an error.\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus,\n      metadata: query.metadata,\n    };\n\n    // If the action had a `moreForQueryId` property then we need to set the\n    // network status on that query as well to `fetchMore`.\n    //\n    // We have a complement to this if statement in the query result and query\n    // error action branch, but importantly *not* in the client result branch.\n    // This is because the implementation of `fetchMore` *always* sets\n    // `fetchPolicy` to `network-only` so we would never have a client result.\n    if (\n      typeof query.fetchMoreForQueryId === 'string' &&\n      this.store[query.fetchMoreForQueryId]\n    ) {\n      this.store[query.fetchMoreForQueryId].networkStatus =\n        NetworkStatus.fetchMore;\n    }\n  }\n\n  public markQueryResult(\n    queryId: string,\n    result: ExecutionResult,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors =\n      result.errors && result.errors.length ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (\n      typeof fetchMoreForQueryId === 'string' &&\n      this.store[fetchMoreForQueryId]\n    ) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  }\n\n  public markQueryError(\n    queryId: string,\n    error: Error,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  }\n\n  public markQueryResultClient(queryId: string, complete: boolean) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = null;\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = complete\n      ? NetworkStatus.ready\n      : NetworkStatus.loading;\n  }\n\n  public stopQuery(queryId: string) {\n    delete this.store[queryId];\n  }\n\n  public reset(observableQueryIds: string[]) {\n    // keep only the queries with query ids that are associated with observables\n    this.store = Object.keys(this.store)\n      .filter(queryId => {\n        return observableQueryIds.indexOf(queryId) > -1;\n      })\n      .reduce(\n        (res, key) => {\n          // XXX set loading to true so listeners don't trigger unless they want results with partial data\n          res[key] = {\n            ...this.store[key],\n            networkStatus: NetworkStatus.loading,\n          };\n\n          return res;\n        },\n        {} as { [queryId: string]: QueryStoreValue },\n      );\n  }\n}\n","export function capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n","import {\n  ExecutionResult,\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n} from 'graphql';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nimport { ApolloCache } from 'apollo-cache';\nimport {\n  getMainDefinition,\n  buildQueryFromSelectionSet,\n  hasDirectives,\n  removeClientSetsFromDocument,\n  mergeDeep,\n  mergeDeepArray,\n  FragmentMap,\n  argumentsObjectFromField,\n  resultKeyNameFromField,\n  getFragmentDefinitions,\n  createFragmentMap,\n  shouldInclude,\n  isField,\n  isInlineFragment,\n} from 'apollo-utilities';\n\nimport { invariant } from 'ts-invariant';\n\nimport ApolloClient from '../ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { capitalizeFirstLetter } from '../util/capitalizeFirstLetter';\n\nexport type Resolver = (\n  fieldName: string,\n  rootValue: any,\n  args: any,\n  context: any,\n  info: {\n    field: FieldNode;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: ExecutionResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<ExecutionResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n      invariant.warn(\n        'Found @client directives in query but no client resolvers were specified. ' +\n          'You can now pass apollo-link-state resolvers to the ApolloClient constructor.',\n      );\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  }\n\n  public prepareContext(context = {}) {\n    const { cache } = this;\n\n    const newContext = {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey: (obj: { __typename: string; id: string | number }) => {\n        if ((cache as any).config) {\n          return (cache as any).config.dataIdFromObject(obj);\n        } else {\n          invariant(false,\n            'To use context.getCacheKey, you need to use a cache that has ' +\n              'a configurable dataIdFromObject, like apollo-cache-inmemory.',\n          );\n        }\n      },\n    };\n\n    return newContext;\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  public shouldForceResolver(field: FieldNode) {\n    return this.shouldForceResolvers(field);\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? capitalizeFirstLetter(definitionOperation)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolver(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(resolve(\n            rootValue,\n            argumentsObjectFromField(field, variables),\n            execContext.context,\n            { field },\n          ));\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n","import { execute, ApolloLink, FetchResult } from 'apollo-link';\nimport { ExecutionResult, DocumentNode } from 'graphql';\nimport { DedupLink as Deduplicator } from 'apollo-link-dedup';\nimport { Cache } from 'apollo-cache';\nimport {\n  assign,\n  getDefaultValues,\n  getMutationDefinition,\n  getOperationDefinition,\n  getOperationName,\n  getQueryDefinition,\n  hasDirectives,\n  graphQLResultHasError,\n  hasClientExports,\n} from 'apollo-utilities';\n\nimport { invariant } from 'ts-invariant';\n\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observer, Subscription, Observable } from '../util/Observable';\nimport { QueryWithUpdater, DataStore } from '../data/store';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore, QueryStoreValue } from '../data/queries';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n} from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  QueryListener,\n  ApolloQueryResult,\n  FetchType,\n  OperationVariables,\n} from './types';\nimport { LocalState } from './LocalState';\n\nexport interface QueryInfo {\n  listeners: QueryListener[];\n  invalidated: boolean;\n  newData: Cache.DiffResult<any> | null;\n  document: DocumentNode | null;\n  lastRequestId: number | null;\n  // A map going from queryId to an observer for a query issued by watchQuery. We use\n  // these to keep track of queries that are inflight and error on the observers associated\n  // with them in case of some destabalizing action (e.g. reset of the Apollo store).\n  observableQuery: ObservableQuery<any> | null;\n  subscriptions: Subscription[];\n  cancel?: () => void;\n}\n\nexport class QueryManager<TStore> {\n  public link: ApolloLink;\n  public mutationStore: MutationStore = new MutationStore();\n  public queryStore: QueryStore = new QueryStore();\n  public dataStore: DataStore<TStore>;\n\n  private deduplicator: ApolloLink;\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast: () => void;\n\n  private ssrMode: boolean;\n\n  // let's not start at zero to avoid pain with bad checks\n  private idCounter = 1;\n\n  // XXX merge with ObservableQuery but that needs to be expanded to support mutations and\n  // subscriptions as well\n  private queries: Map<string, QueryInfo> = new Map();\n\n  // A map of Promise reject functions for fetchQuery promises that have not\n  // yet been resolved, used to keep track of in-flight queries so that we can\n  // reject them in case a destabilizing event occurs (e.g. Apollo store reset).\n  // The key is in the format of `query:${queryId}` or `fetchRequest:${queryId}`,\n  // depending on where the promise's rejection function was created from.\n  private fetchQueryRejectFns = new Map<string, Function>();\n\n  // A map going from the name of a query to an observer issued for it by watchQuery. This is\n  // generally used to refetches for refetchQueries and to update mutation results through\n  // updateQueries.\n  private queryIdsByName: { [queryName: string]: string[] } = {};\n\n  constructor({\n    link,\n    queryDeduplication = false,\n    store,\n    onBroadcast = () => undefined,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n  }: {\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    store: DataStore<TStore>;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n  }) {\n    this.link = link;\n    this.deduplicator = ApolloLink.from([new Deduplicator(), link]);\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache: store.getCache() });\n    this.ssrMode = ssrMode;\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(new Error('QueryManager stopped while query was in flight'));\n    });\n  }\n\n  public async mutate<T>({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries: updateQueriesByName,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    errorPolicy = 'none',\n    fetchPolicy,\n    context = {},\n  }: MutationOptions): Promise<FetchResult<T>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      !fetchPolicy || fetchPolicy === 'no-cache',\n      \"fetchPolicy for mutations currently only supports the 'no-cache' policy\"\n    );\n\n    const mutationId = this.generateQueryId();\n    const cache = this.dataStore.getCache();\n    (mutation = cache.transformDocument(mutation)),\n      (variables = assign(\n        {},\n        getDefaultValues(getMutationDefinition(mutation)),\n        variables,\n      ));\n\n    this.setQuery(mutationId, () => ({ document: mutation }));\n\n    // Create a map of update queries by id to the query instead of by name.\n    const generateUpdateQueriesInfo: () => {\n      [queryId: string]: QueryWithUpdater;\n    } = () => {\n      const ret: { [queryId: string]: QueryWithUpdater } = {};\n\n      if (updateQueriesByName) {\n        Object.keys(updateQueriesByName).forEach(queryName =>\n          (this.queryIdsByName[queryName] || []).forEach(queryId => {\n            ret[queryId] = {\n              updater: updateQueriesByName[queryName],\n              query: this.queryStore.get(queryId),\n            };\n          }),\n        );\n      }\n\n      return ret;\n    };\n\n    const updatedVariables: OperationVariables =\n      hasClientExports(mutation)\n        ? await this.localState.addExportedVariables(\n            mutation,\n            variables,\n            context,\n          )\n        : variables;\n\n    this.mutationStore.initMutation(\n      mutationId,\n      mutation,\n      updatedVariables,\n    );\n\n    this.dataStore.markMutationInit({\n      mutationId,\n      document: mutation,\n      variables: updatedVariables || {},\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse,\n    });\n\n    this.broadcastQueries();\n\n    return new Promise((resolve, reject) => {\n      let storeResult: FetchResult<T> | null;\n      let error: ApolloError;\n\n      const operation = this.buildOperationForLink(mutation, updatedVariables, {\n        ...context,\n        optimisticResponse,\n      });\n\n      const completeMutation = () => {\n        if (error) {\n          this.mutationStore.markMutationError(mutationId, error);\n        }\n\n        this.dataStore.markMutationComplete({\n          mutationId,\n          optimisticResponse,\n        });\n\n        this.broadcastQueries();\n\n        if (error) {\n          return Promise.reject(error);\n        }\n\n        // allow for conditional refetches\n        // XXX do we want to make this the only API one day?\n        if (typeof refetchQueries === 'function') {\n          refetchQueries = refetchQueries(storeResult as ExecutionResult);\n        }\n\n        const refetchQueryPromises: Promise<\n          ApolloQueryResult<any>[] | ApolloQueryResult<{}>\n        >[] = [];\n\n        for (const refetchQuery of refetchQueries) {\n          if (typeof refetchQuery === 'string') {\n            const promise = this.refetchQueryByName(refetchQuery);\n            if (promise) {\n              refetchQueryPromises.push(promise);\n            }\n            continue;\n          }\n\n          const queryOptions: QueryOptions = {\n            query: refetchQuery.query,\n            variables: refetchQuery.variables,\n            fetchPolicy: 'network-only',\n          };\n\n          if (refetchQuery.context) {\n            queryOptions.context = refetchQuery.context;\n          }\n\n          refetchQueryPromises.push(this.query(queryOptions));\n        }\n\n        return Promise.all(\n          awaitRefetchQueries ? refetchQueryPromises : [],\n        ).then(() => {\n          this.setQuery(mutationId, () => ({ document: null }));\n\n          if (\n            errorPolicy === 'ignore' &&\n            storeResult &&\n            graphQLResultHasError(storeResult)\n          ) {\n            delete storeResult.errors;\n          }\n\n          return storeResult as FetchResult<T>;\n        });\n      };\n\n      const clientQuery = this.localState.clientQuery(operation.query);\n      const serverQuery = this.localState.serverQuery(operation.query);\n      if (serverQuery) {\n        operation.query = serverQuery;\n      }\n\n      const obs: Observable<FetchResult> = serverQuery\n        ? execute(this.link, operation)\n        : Observable.of({\n            data: {},\n          });\n\n      const self = this;\n      let complete = false;\n      let handlingNext = false;\n      obs.subscribe({\n        next: async (result: ExecutionResult) => {\n          handlingNext = true;\n\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            handlingNext = false;\n            error = new ApolloError({\n              graphQLErrors: result.errors,\n            });\n            return;\n          }\n\n          self.mutationStore.markMutationResult(mutationId);\n          let updatedResult = result;\n          const { context, variables } = operation;\n\n          // Run the query through local client resolvers.\n          if (clientQuery && hasDirectives(['client'], clientQuery)) {\n            updatedResult = await self.localState\n              .runResolvers({\n                document: clientQuery,\n                remoteResult: result,\n                context,\n                variables,\n              })\n              .catch(error => {\n                handlingNext = false;\n                reject(error);\n                return result;\n              });\n          }\n\n          if (fetchPolicy !== 'no-cache') {\n            self.dataStore.markMutationResult({\n              mutationId,\n              result: updatedResult,\n              document: mutation,\n              variables: updatedVariables || {},\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n            });\n          }\n\n          storeResult = updatedResult as FetchResult<T>;\n\n          handlingNext = false;\n          if (complete) {\n            completeMutation().then(resolve, reject);\n          }\n        },\n\n        error(err: Error) {\n          self.mutationStore.markMutationError(mutationId, err);\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n          self.broadcastQueries();\n\n          self.setQuery(mutationId, () => ({ document: null }));\n          reject(\n            new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n\n        complete() {\n          if (!handlingNext) {\n            completeMutation().then(resolve, reject);\n          }\n          complete = true;\n        },\n      });\n    });\n  }\n\n  public async fetchQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    fetchType?: FetchType,\n    // This allows us to track if this is a query spawned by a `fetchMore`\n    // call for another query. We need this data to compute the `fetchMore`\n    // network status for the query this is fetching for.\n    fetchMoreForQueryId?: string,\n  ): Promise<FetchResult<T>> {\n    const {\n      variables = {},\n      metadata = null,\n      fetchPolicy = 'cache-first', // cache-first is the default fetch policy.\n      context = {},\n    } = options;\n    const cache = this.dataStore.getCache();\n    const query = cache.transformDocument(options.query);\n\n    const updatedVariables: OperationVariables =\n      hasClientExports(query)\n        ? await this.localState.addExportedVariables(query, variables, context)\n        : variables;\n\n    const updatedOptions: WatchQueryOptions = {\n      ...options,\n      ...{ variables: updatedVariables },\n    };\n\n    let storeResult: any;\n    let needToFetch: boolean =\n      fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n\n    // If this is not a force fetch, we want to diff the query against the\n    // store before we fetch it from the network interface.\n    // TODO we hit the cache even if the policy is network-first. This could be unnecessary if the network is up.\n    if (\n      fetchType !== FetchType.refetch &&\n      fetchPolicy !== 'network-only' &&\n      fetchPolicy !== 'no-cache'\n    ) {\n      const { complete, result } = this.dataStore.getCache().diff({\n        query,\n        variables: updatedVariables,\n        returnPartialData: true,\n        optimistic: false,\n      });\n\n      // If we're in here, only fetch if we have missing fields\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    let shouldFetch =\n      needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n\n    // we need to check to see if this is an operation that uses the @live directive\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n\n    const requestId = this.generateRequestId();\n\n    // set up a watcher to listen to cache updates\n    const cancel = this.updateQueryWatch(queryId, query, updatedOptions);\n\n    // Initialize query in store with unique requestId\n    this.setQuery(queryId, () => ({\n      document: query,\n      lastRequestId: requestId,\n      invalidated: true,\n      cancel,\n    }));\n\n    this.invalidate(true, fetchMoreForQueryId);\n\n    this.queryStore.initQuery({\n      queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables: updatedVariables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata,\n      fetchMoreForQueryId,\n    });\n\n    this.broadcastQueries();\n\n    // If there is no part of the query we need to fetch from the server (or,\n    // fetchPolicy is cache-only), we just write the store result as the final result.\n    const shouldDispatchClientResult =\n      !shouldFetch || fetchPolicy === 'cache-and-network';\n    if (shouldDispatchClientResult) {\n      this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n      this.invalidate(true, queryId, fetchMoreForQueryId);\n      this.broadcastQueries(this.localState.shouldForceResolvers(query));\n    }\n\n    if (shouldFetch) {\n      const networkResult = this.fetchRequest<T>({\n        requestId,\n        queryId,\n        document: query,\n        options: updatedOptions,\n        fetchMoreForQueryId,\n      }).catch(error => {\n        // This is for the benefit of `refetch` promises, which currently don't get their errors\n        // through the store like watchQuery observers do\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          const { lastRequestId } = this.getQuery(queryId);\n          if (requestId >= (lastRequestId || 1)) {\n            this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n\n            this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            this.broadcastQueries();\n          }\n\n          throw new ApolloError({ networkError: error });\n        }\n      });\n\n      // we don't return the promise for cache-and-network since it is already\n      // returned below from the cache\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      } else {\n        // however we need to catch the error so it isn't unhandled in case of\n        // network error\n        networkResult.catch(() => {});\n      }\n    }\n\n    // If we have no query to send to the server, we should return the result\n    // found within the store.\n    return Promise.resolve({ data: storeResult });\n  }\n\n  // Returns a query listener that will update the given observer based on the\n  // results (or lack thereof) for a particular query.\n  public queryListenerForObserver<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ): QueryListener {\n    let previouslyHadError: boolean = false;\n    return async (\n      queryStoreValue: QueryStoreValue,\n      newData?: Cache.DiffResult<T>,\n      forceResolvers?: boolean,\n    ) => {\n      // we're going to take a look at the data, so the query is no longer invalidated\n      this.invalidate(false, queryId);\n\n      // The query store value can be undefined in the event of a store\n      // reset.\n      if (!queryStoreValue) return;\n\n      const { observableQuery } = this.getQuery(queryId);\n\n      const fetchPolicy = observableQuery\n        ? observableQuery.options.fetchPolicy\n        : options.fetchPolicy;\n\n      // don't watch the store for queries on standby\n      if (fetchPolicy === 'standby') return;\n\n      const errorPolicy = observableQuery\n        ? observableQuery.options.errorPolicy\n        : options.errorPolicy;\n\n      const lastResult = observableQuery\n        ? observableQuery.getLastResult()\n        : null;\n\n      const lastError = observableQuery ? observableQuery.getLastError() : null;\n\n      let shouldNotifyIfLoading =\n        (!newData && queryStoreValue.previousVariables != null) ||\n        fetchPolicy === 'cache-only' ||\n        fetchPolicy === 'cache-and-network';\n\n      // if this caused by a cache broadcast but the query is still in flight\n      // don't notify the observer\n      // if (\n      //   isCacheBroadcast &&\n      //   isNetworkRequestInFlight(queryStoreValue.networkStatus)\n      // ) {\n      //   shouldNotifyIfLoading = false;\n      // }\n\n      const networkStatusChanged = Boolean(\n        lastResult &&\n          queryStoreValue.networkStatus !== lastResult.networkStatus,\n      );\n\n      const errorStatusChanged =\n        errorPolicy &&\n        (lastError && lastError.graphQLErrors) !==\n          queryStoreValue.graphQLErrors &&\n        errorPolicy !== 'none';\n\n      if (\n        !isNetworkRequestInFlight(queryStoreValue.networkStatus) ||\n        (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n        shouldNotifyIfLoading\n      ) {\n        // If we have either a GraphQL error or a network error, we create\n        // an error and tell the observer about it.\n        if (\n          ((!errorPolicy || errorPolicy === 'none') &&\n            queryStoreValue.graphQLErrors &&\n            queryStoreValue.graphQLErrors.length > 0) ||\n          queryStoreValue.networkError\n        ) {\n          const apolloError = new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError,\n          });\n          previouslyHadError = true;\n          if (observer.error) {\n            try {\n              observer.error(apolloError);\n            } catch (e) {\n              // Throw error outside this control flow to avoid breaking Apollo's state\n              setTimeout(() => {\n                throw e;\n              }, 0);\n            }\n          } else {\n            // Throw error outside this control flow to avoid breaking Apollo's state\n            setTimeout(() => {\n              throw apolloError;\n            }, 0);\n            if (process.env.NODE_ENV !== 'production') {\n              /* tslint:disable-next-line */\n              console.info(\n                'An unhandled error was thrown because no error handler is registered ' +\n                  'for the query ' +\n                  JSON.stringify(queryStoreValue.document),\n              );\n            }\n          }\n          return;\n        }\n\n        try {\n          let data: any;\n          let isMissing: boolean;\n\n          if (newData) {\n            // As long as we're using the cache, clear out the latest\n            // `newData`, since it will now become the current data. We need\n            // to keep the `newData` stored with the query when using\n            // `no-cache` since `getCurrentQueryResult` attemps to pull from\n            // `newData` first, following by trying the cache (which won't\n            // find a hit for `no-cache`).\n            if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n              this.setQuery(queryId, () => ({ newData: null }));\n            }\n\n            data = newData.result;\n            isMissing = !newData.complete || false;\n          } else {\n            if (lastResult && lastResult.data && !errorStatusChanged) {\n              data = lastResult.data;\n              isMissing = false;\n            } else {\n              const { document } = this.getQuery(queryId);\n              const readResult = this.dataStore.getCache().diff({\n                query: document as DocumentNode,\n                variables:\n                  queryStoreValue.previousVariables ||\n                  queryStoreValue.variables,\n                optimistic: true,\n              });\n\n              data = readResult.result;\n              isMissing = !readResult.complete;\n            }\n          }\n\n          let resultFromStore: ApolloQueryResult<T>;\n\n          // If there is some data missing and the user has told us that they\n          // do not tolerate partial data then we want to return the previous\n          // result and mark it as stale.\n          if (isMissing && fetchPolicy !== 'cache-only') {\n            resultFromStore = {\n              data: lastResult && lastResult.data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: true,\n            };\n          } else {\n            resultFromStore = {\n              data,\n              loading: isNetworkRequestInFlight(queryStoreValue.networkStatus),\n              networkStatus: queryStoreValue.networkStatus,\n              stale: false,\n            };\n          }\n\n          // if the query wants updates on errors we need to add it to the result\n          if (\n            errorPolicy === 'all' &&\n            queryStoreValue.graphQLErrors &&\n            queryStoreValue.graphQLErrors.length > 0\n          ) {\n            resultFromStore.errors = queryStoreValue.graphQLErrors;\n          }\n\n          if (observer.next) {\n            if (\n              previouslyHadError ||\n              !observableQuery ||\n              observableQuery.isDifferentFromLastResult(resultFromStore)\n            ) {\n              try {\n                // Local resolvers can be forced by using\n                // `@client(always: true)` syntax. If any resolvers are\n                // forced, we'll make sure they're run here to override any\n                // data returned from the cache. Only the selection sets and\n                // fields marked with `@client(always: true)` are overwritten.\n                if (forceResolvers) {\n                  const { query, variables, context } = options;\n\n                  const updatedResult = await this.localState.runResolvers({\n                    document: query,\n                    remoteResult: resultFromStore,\n                    context,\n                    variables,\n                    onlyRunForcedResolvers: forceResolvers,\n                  });\n\n                  resultFromStore = {\n                    ...resultFromStore,\n                    ...updatedResult,\n                  };\n                }\n\n                observer.next(resultFromStore);\n              } catch (e) {\n                // Throw error outside this control flow to avoid breaking Apollo's state\n                setTimeout(() => {\n                  throw e;\n                }, 0);\n              }\n            }\n          }\n          previouslyHadError = false;\n        } catch (error) {\n          previouslyHadError = true;\n          if (observer.error)\n            observer.error(new ApolloError({ networkError: error }));\n          return;\n        }\n      }\n    };\n  }\n\n  // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called\n  // directly (i.e. through ApolloClient) or through the query method within QueryManager.\n  // Currently, the query method uses watchQuery in order to handle non-network errors correctly\n  // but we don't want to keep track observables issued for the query method since those aren't\n  // supposed to be refetched in the event of a store reset. Once we unify error handling for\n  // network errors and non-network errors, the shouldSubscribe option will go away.\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions,\n    shouldSubscribe = true,\n  ): ObservableQuery<T, TVariables> {\n    invariant(\n      options.fetchPolicy !== 'standby',\n      'client.watchQuery cannot be called with fetchPolicy set to \"standby\"',\n    );\n\n    // get errors synchronously\n    const queryDefinition = getQueryDefinition(options.query);\n\n    // assign variable default values if supplied\n    if (\n      queryDefinition.variableDefinitions &&\n      queryDefinition.variableDefinitions.length\n    ) {\n      const defaultValues = getDefaultValues(queryDefinition);\n\n      options.variables = assign({}, defaultValues, options.variables);\n    }\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    let transformedOptions = { ...options } as WatchQueryOptions<TVariables>;\n\n    return new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe,\n    });\n  }\n\n  public query<T>(options: QueryOptions): Promise<ApolloQueryResult<T>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const watchedQuery = this.watchQuery<T>(options, false);\n      this.fetchQueryRejectFns.set(`query:${watchedQuery.queryId}`, reject);\n      watchedQuery\n        .result()\n        .then(resolve, reject)\n        // Since neither resolve nor reject throw or return a value, this .then\n        // handler is guaranteed to execute. Note that it doesn't really matter\n        // when we remove the reject function from this.fetchQueryRejectFns,\n        // since resolve and reject are mutually idempotent. In fact, it would\n        // not be incorrect to let reject functions accumulate over time; it's\n        // just a waste of memory.\n        .then(() =>\n          this.fetchQueryRejectFns.delete(`query:${watchedQuery.queryId}`),\n        );\n    });\n  }\n\n  public generateQueryId() {\n    const queryId = this.idCounter.toString();\n    this.idCounter++;\n    return queryId;\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(true, queryId);\n  }\n\n  public addQueryListener(queryId: string, listener: QueryListener) {\n    this.setQuery(queryId, ({ listeners = [] }) => ({\n      listeners: listeners.concat([listener]),\n      invalidated: false,\n    }));\n  }\n\n  public updateQueryWatch(\n    queryId: string,\n    document: DocumentNode,\n    options: WatchQueryOptions,\n  ) {\n    const { cancel } = this.getQuery(queryId);\n    if (cancel) cancel();\n    const previousResult = () => {\n      let previousResult = null;\n      const { observableQuery } = this.getQuery(queryId);\n      if (observableQuery) {\n        const lastResult = observableQuery.getLastResult();\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n    return this.dataStore.getCache().watch({\n      query: document as DocumentNode,\n      variables: options.variables,\n      optimistic: true,\n      previousResult,\n      callback: newData => {\n        this.setQuery(queryId, () => ({ invalidated: true, newData }));\n      },\n    });\n  }\n\n  // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.\n  public addObservableQuery<T>(\n    queryId: string,\n    observableQuery: ObservableQuery<T>,\n  ) {\n    this.setQuery(queryId, () => ({ observableQuery }));\n\n    // Insert the ObservableQuery into this.observableQueriesByName if the query has a name\n    const queryDef = getQueryDefinition(observableQuery.options.query);\n    if (queryDef.name && queryDef.name.value) {\n      const queryName = queryDef.name.value;\n\n      // XXX we may we want to warn the user about query name conflicts in the future\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName] || [];\n      this.queryIdsByName[queryName].push(observableQuery.queryId);\n    }\n  }\n\n  public removeObservableQuery(queryId: string) {\n    const { observableQuery, cancel } = this.getQuery(queryId);\n    if (cancel) cancel();\n    if (!observableQuery) return;\n\n    const definition = getQueryDefinition(observableQuery.options.query);\n    const queryName = definition.name ? definition.name.value : null;\n    this.setQuery(queryId, () => ({ observableQuery: null }));\n    if (queryName) {\n      this.queryIdsByName[queryName] = this.queryIdsByName[queryName].filter(\n        val => {\n          return !(observableQuery.queryId === val);\n        },\n      );\n    }\n  }\n\n  public clearStore(): Promise<void> {\n    // Before we have sent the reset action to the store,\n    // we can no longer rely on the results returned by in-flight\n    // requests since these may depend on values that previously existed\n    // in the data portion of the store. So, we cancel the promises and observers\n    // that we have issued so far and not yet resolved (in the case of\n    // queries).\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(\n        new Error(\n          'Store reset while query was in flight(not completed in link chain)',\n        ),\n      );\n    });\n\n    const resetIds: string[] = [];\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) resetIds.push(queryId);\n    });\n\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n\n    // begin removing data from the store\n    const reset = this.dataStore.reset();\n\n    return reset;\n  }\n\n  public resetStore(): Promise<ApolloQueryResult<any>[]> {\n    // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n    return this.clearStore().then(() => {\n      return this.reFetchObservableQueries();\n    });\n  }\n\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<\n      ApolloQueryResult<any>\n    >[] = this.getObservableQueryPromises(includeStandby);\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public startQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    listener: QueryListener,\n  ) {\n    this.addQueryListener(queryId, listener);\n\n    this.fetchQuery<T>(queryId, options)\n      // `fetchQuery` returns a Promise. In case of a failure it should be caucht or else the\n      // console will show an `Uncaught (in promise)` message. Ignore the error for now.\n      .catch(() => undefined);\n\n    return queryId;\n  }\n\n  public startGraphQLSubscription<T = any>(\n    options: SubscriptionOptions,\n  ): Observable<T> {\n    const { query } = options;\n    const isCacheEnabled = !(\n      options.fetchPolicy && options.fetchPolicy === 'no-cache'\n    );\n    const cache = this.dataStore.getCache();\n    let transformedDoc = cache.transformDocument(query);\n\n    const variables = assign(\n      {},\n      getDefaultValues(getOperationDefinition(query)),\n      options.variables,\n    );\n\n    let updatedVariables = variables;\n    let sub: Subscription;\n    let observers: Observer<any>[] = [];\n    const clientQuery = this.localState.clientQuery(transformedDoc);\n\n    return new Observable(observer => {\n      observers.push(observer);\n\n      // If this is the first observer, actually initiate the network\n      // subscription.\n      if (observers.length === 1) {\n        let activeNextCalls = 0;\n        let complete = false;\n\n        const handler = {\n          next: async (result: FetchResult) => {\n            activeNextCalls += 1;\n            let updatedResult = result;\n\n            // Run the query through local client resolvers.\n            if (clientQuery && hasDirectives(['client'], clientQuery)) {\n              updatedResult = await this.localState.runResolvers({\n                document: clientQuery,\n                remoteResult: result,\n                context: {},\n                variables: updatedVariables,\n              });\n            }\n\n            if (isCacheEnabled) {\n              this.dataStore.markSubscriptionResult(\n                updatedResult,\n                transformedDoc,\n                updatedVariables,\n              );\n              this.broadcastQueries();\n            }\n\n            observers.forEach(obs => {\n              // If an error exists and a `error` handler has been defined on\n              // the observer, call that `error` handler and make sure the\n              // `next` handler is skipped. If no `error` handler exists, we're\n              // still passing any errors that might occur into the `next`\n              // handler, to give that handler a chance to deal with the\n              // error (we're doing this for backwards compatibilty).\n              if (graphQLResultHasError(updatedResult) && obs.error) {\n                obs.error(\n                  new ApolloError({\n                    graphQLErrors: updatedResult.errors,\n                  }),\n                );\n              } else if (obs.next) {\n                obs.next(updatedResult);\n              }\n              activeNextCalls -= 1;\n            });\n\n            if (activeNextCalls === 0 && complete) {\n              handler.complete();\n            }\n          },\n          error: (error: Error) => {\n            observers.forEach(obs => {\n              if (obs.error) {\n                obs.error(error);\n              }\n            });\n          },\n          complete: () => {\n            if (activeNextCalls === 0) {\n              observers.forEach(obs => {\n                if (obs.complete) {\n                  obs.complete();\n                }\n              });\n            }\n            complete = true;\n          }\n        };\n\n        (async () => {\n          const updatedVariables: OperationVariables =\n            hasClientExports(transformedDoc)\n              ? await this.localState.addExportedVariables(\n                  transformedDoc,\n                  variables\n                )\n              : variables;\n          const serverQuery = this.localState.serverQuery(transformedDoc);\n          if (serverQuery) {\n            const operation = this.buildOperationForLink(\n              serverQuery,\n              updatedVariables,\n            );\n            sub = execute(this.link, operation).subscribe(handler);\n          } else {\n            sub = Observable.of({ data: {} }).subscribe(handler);\n          }\n        })();\n      }\n\n      return () => {\n        observers = observers.filter(obs => obs !== observer);\n\n        // If we removed the last observer, tear down the network subscription\n        if (observers.length === 0 && sub) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    const { subscriptions } = this.getQuery(queryId);\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchQueryRejectFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchQueryRejectFns.delete(`query:${queryId}`);\n    this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n    subscriptions.forEach(x => x.unsubscribe());\n    this.queries.delete(queryId);\n  }\n\n  public getCurrentQueryResult<T>(\n    observableQuery: ObservableQuery<T>,\n    optimistic: boolean = true,\n  ): {\n    data: T | undefined;\n    partial: boolean;\n  } {\n    const { variables, query, fetchPolicy } = observableQuery.options;\n    const lastResult = observableQuery.getLastResult();\n    const { newData } = this.getQuery(observableQuery.queryId);\n\n    // XXX test this\n    if (newData && newData.complete) {\n      return { data: newData.result, partial: false };\n    } else if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return { data: undefined, partial: false };\n    } else {\n      try {\n        // the query is brand new, so we read from the store to see if anything is there\n        const data =\n          this.dataStore.getCache().read<T>({\n            query,\n            variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            optimistic,\n          }) || undefined;\n\n        return { data, partial: false };\n      } catch (e) {\n        return { data: undefined, partial: true };\n      }\n    }\n  }\n\n  public getQueryWithPreviousResult<T>(\n    queryIdOrObservable: string | ObservableQuery<T>,\n  ): {\n    previousResult: any;\n    variables: OperationVariables | undefined;\n    document: DocumentNode;\n  } {\n    let observableQuery: ObservableQuery<T>;\n    if (typeof queryIdOrObservable === 'string') {\n      const { observableQuery: foundObserveableQuery } = this.getQuery(\n        queryIdOrObservable,\n      );\n      invariant(\n        foundObserveableQuery,\n        `ObservableQuery with this id doesn't exist: ${queryIdOrObservable}`\n      );\n      observableQuery = foundObserveableQuery!;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    const { variables, query } = observableQuery.options;\n\n    const { data } = this.getCurrentQueryResult(observableQuery, false);\n\n    return {\n      previousResult: data,\n      variables,\n      document: query,\n    };\n  }\n\n  public broadcastQueries(forceResolvers = false) {\n    this.onBroadcast();\n    this.queries.forEach((info, id) => {\n      if (!info.invalidated || !info.listeners) return;\n      info.listeners\n        // it's possible for the listener to be undefined if the query is being stopped\n        // See here for more detail: https://github.com/apollostack/apollo-client/issues/231\n        .filter((x: QueryListener) => !!x)\n        .forEach((listener: QueryListener) => {\n          listener(this.queryStore.get(id), info.newData, forceResolvers);\n        });\n    });\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private getObservableQueryPromises(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>>[] {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (!observableQuery) return;\n      const fetchPolicy = observableQuery.options.fetchPolicy;\n\n      observableQuery.resetLastResults();\n      if (\n        fetchPolicy !== 'cache-only' &&\n        (includeStandby || fetchPolicy !== 'standby')\n      ) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      this.setQuery(queryId, () => ({ newData: null }));\n      this.invalidate(true, queryId);\n    });\n\n    return observableQueryPromises;\n  }\n\n  // Takes a request id, query id, a query document and information associated with the query\n  // and send it to the network interface. Returns\n  // a promise for the result associated with that request.\n  private fetchRequest<T>({\n    requestId,\n    queryId,\n    document,\n    options,\n    fetchMoreForQueryId,\n  }: {\n    requestId: number;\n    queryId: string;\n    document: DocumentNode;\n    options: WatchQueryOptions;\n    fetchMoreForQueryId?: string;\n  }): Promise<FetchResult<T>> {\n    const { variables, context, errorPolicy = 'none', fetchPolicy } = options;\n    let resultFromStore: any;\n    let errorsFromStore: any;\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      let obs: Observable<FetchResult>;\n      let updatedContext = {};\n\n      const clientQuery = this.localState.clientQuery(document);\n      const serverQuery = this.localState.serverQuery(document);\n      if (serverQuery) {\n        const operation = this.buildOperationForLink(serverQuery, variables, {\n          ...context,\n          forceFetch: !this.queryDeduplication,\n        });\n        updatedContext = operation.context;\n        obs = execute(this.deduplicator, operation);\n      } else {\n        updatedContext = this.prepareContext(context);\n        obs = Observable.of({ data: {} });\n      }\n\n      this.fetchQueryRejectFns.set(`fetchRequest:${queryId}`, reject);\n\n      let complete = false;\n      let handlingNext = true;\n\n      const subscriber = {\n        next: async (result: ExecutionResult) => {\n          handlingNext = true;\n          let updatedResult = result;\n\n          // default the lastRequestId to 1\n          const { lastRequestId } = this.getQuery(queryId);\n          if (requestId >= (lastRequestId || 1)) {\n            // Run the query through local client resolvers.\n            if (clientQuery && hasDirectives(['client'], clientQuery)) {\n              updatedResult = await this.localState\n                .runResolvers({\n                  document: clientQuery,\n                  remoteResult: result,\n                  context: updatedContext,\n                  variables,\n                })\n                .catch(error => {\n                  handlingNext = false;\n                  reject(error);\n                  return result;\n                });\n            }\n\n            if (fetchPolicy !== 'no-cache') {\n              try {\n                this.dataStore.markQueryResult(\n                  updatedResult,\n                  document,\n                  variables,\n                  fetchMoreForQueryId,\n                  errorPolicy === 'ignore' || errorPolicy === 'all',\n                );\n              } catch (e) {\n                handlingNext = false;\n                reject(e);\n                return;\n              }\n            } else {\n              this.setQuery(queryId, () => ({\n                newData: { result: updatedResult.data, complete: true },\n              }));\n            }\n\n            this.queryStore.markQueryResult(\n              queryId,\n              updatedResult,\n              fetchMoreForQueryId,\n            );\n\n            this.invalidate(true, queryId, fetchMoreForQueryId);\n\n            this.broadcastQueries();\n          }\n\n          if (updatedResult.errors && errorPolicy === 'none') {\n            handlingNext = false;\n            reject(\n              new ApolloError({\n                graphQLErrors: updatedResult.errors,\n              }),\n            );\n            return;\n          } else if (errorPolicy === 'all') {\n            errorsFromStore = updatedResult.errors;\n          }\n\n          if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n            // We don't write fetchMore results to the store because this would overwrite\n            // the original result in case an @connection directive is used.\n            resultFromStore = updatedResult.data;\n          } else {\n            try {\n              // ensure result is combined with data already in store\n              resultFromStore = this.dataStore.getCache().read({\n                variables,\n                query: document,\n                optimistic: false,\n              });\n              // this will throw an error if there are missing fields in\n              // the results which can happen with errors from the server.\n              // tslint:disable-next-line\n            } catch (e) {}\n          }\n\n          handlingNext = false;\n          if (complete) {\n            subscriber.complete();\n          }\n        },\n        error: (error: ApolloError) => {\n          this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n\n          this.setQuery(queryId, ({ subscriptions }) => ({\n            subscriptions: subscriptions.filter(x => x !== subscription),\n          }));\n\n          reject(error);\n        },\n        complete: () => {\n          if (!handlingNext) {\n            this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n\n            this.setQuery(queryId, ({ subscriptions }) => ({\n              subscriptions: subscriptions.filter(x => x !== subscription),\n            }));\n\n            resolve({\n              data: resultFromStore,\n              errors: errorsFromStore,\n              loading: false,\n              networkStatus: NetworkStatus.ready,\n              stale: false,\n            });\n          }\n          complete = true;\n        },\n      };\n\n      const subscription = obs.subscribe(subscriber);\n\n      this.setQuery(queryId, ({ subscriptions }) => ({\n        subscriptions: subscriptions.concat([subscription]),\n      }));\n    }).catch(error => {\n      this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n      throw error;\n    });\n  }\n\n  // Refetches a query given that query's name. Refetches\n  // all ObservableQuery instances associated with the query name.\n  private refetchQueryByName(queryName: string) {\n    const refetchedQueries = this.queryIdsByName[queryName];\n    // early return if the query named does not exist (not yet fetched)\n    // this used to warn but it may be inteneded behavoir to try and refetch\n    // un called queries because they could be on different routes\n    if (refetchedQueries === undefined) return;\n    return Promise.all(\n      refetchedQueries\n        .map(id => this.getQuery(id).observableQuery)\n        .filter(x => !!x)\n        .map((x: ObservableQuery<any>) => x.refetch()),\n    );\n  }\n\n  private generateRequestId() {\n    const requestId = this.idCounter;\n    this.idCounter++;\n    return requestId;\n  }\n\n  private getQuery(queryId: string) {\n    return (\n      this.queries.get(queryId) || {\n        listeners: [],\n        invalidated: false,\n        document: null,\n        newData: null,\n        lastRequestId: null,\n        observableQuery: null,\n        subscriptions: [],\n      }\n    );\n  }\n\n  private setQuery<T extends keyof QueryInfo>(\n    queryId: string,\n    updater: (prev: QueryInfo) => Pick<QueryInfo, T>,\n  ) {\n    const prev = this.getQuery(queryId);\n    const newInfo = { ...prev, ...updater(prev) };\n    this.queries.set(queryId, newInfo);\n  }\n\n  private invalidate(\n    invalidated: boolean,\n    queryId?: string,\n    fetchMoreForQueryId?: string,\n  ) {\n    if (queryId) this.setQuery(queryId, () => ({ invalidated }));\n\n    if (fetchMoreForQueryId) {\n      this.setQuery(fetchMoreForQueryId, () => ({ invalidated }));\n    }\n  }\n\n  private buildOperationForLink(\n    document: DocumentNode,\n    variables: any,\n    extraContext?: any,\n  ) {\n    const cache = this.dataStore.getCache();\n    return {\n      query: cache.transformForLink\n        ? cache.transformForLink(document)\n        : document,\n      variables,\n      operationName: getOperationName(document) || undefined,\n      context: this.prepareContext(extraContext),\n    };\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n\n  public checkInFlight(queryId: string) {\n    const query = this.queryStore.get(queryId);\n\n    return (\n      query &&\n      query.networkStatus !== NetworkStatus.ready &&\n      query.networkStatus !== NetworkStatus.error\n    );\n  }\n\n  // Map from client ID to { interval, options }.\n  private pollingInfoByQueryId = new Map<string, {\n    interval: number;\n    lastPollTimeMs: number;\n    options: WatchQueryOptions;\n  }>();\n\n  private nextPoll: {\n    time: number;\n    timeout: NodeJS.Timeout;\n  } | null = null;\n\n  public startPollingQuery(\n    options: WatchQueryOptions,\n    queryId: string,\n    listener?: QueryListener,\n  ): string {\n    const { pollInterval } = options;\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    // Do not poll in SSR mode\n    if (!this.ssrMode) {\n      this.pollingInfoByQueryId.set(queryId, {\n        interval: pollInterval!,\n        // Avoid polling until at least pollInterval milliseconds from now.\n        // The -10 is a fudge factor to help with tests that rely on simulated\n        // timeouts via jest.runTimersToTime.\n        lastPollTimeMs: Date.now() - 10,\n        options: {\n          ...options,\n          fetchPolicy: 'network-only',\n        },\n      });\n\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n\n      this.schedulePoll(pollInterval!);\n    }\n\n    return queryId;\n  }\n\n  public stopPollingQuery(queryId: string) {\n    // Since the master polling interval dynamically adjusts to the contents of\n    // this.pollingInfoByQueryId, stopping a query from polling is as easy as\n    // removing it from the map.\n    this.pollingInfoByQueryId.delete(queryId);\n  }\n\n  // Calling this method ensures a poll will happen within the specified time\n  // limit, canceling any pending polls that would not happen in time.\n  private schedulePoll(timeLimitMs: number) {\n    const now = Date.now();\n\n    if (this.nextPoll) {\n      if (timeLimitMs < this.nextPoll.time - now) {\n        // The next poll will happen too far in the future, so cancel it, and\n        // fall through to scheduling a new timeout.\n        clearTimeout(this.nextPoll.timeout);\n      } else {\n        // The next poll will happen within timeLimitMs, so all is well.\n        return;\n      }\n    }\n\n    this.nextPoll = {\n      // Estimated time when the timeout will fire.\n      time: now + timeLimitMs,\n\n      timeout: setTimeout(() => {\n        this.nextPoll = null;\n        let nextTimeLimitMs = Infinity;\n\n        this.pollingInfoByQueryId.forEach((info, queryId) => {\n          // Pick next timeout according to current minimum interval.\n          if (info.interval < nextTimeLimitMs) {\n            nextTimeLimitMs = info.interval;\n          }\n\n          if (!this.checkInFlight(queryId)) {\n            // If this query was last polled more than interval milliseconds\n            // ago, poll it now. Note that there may be a small delay between\n            // the desired polling time and the actual polling time (equal to\n            // at most the minimum polling interval across all queries), but\n            // that's the tradeoff to batching polling intervals.\n            if (Date.now() - info.lastPollTimeMs >= info.interval) {\n              const updateLastPollTime = () => {\n                info.lastPollTimeMs = Date.now();\n              };\n              this.fetchQuery(queryId, info.options, FetchType.poll).then(\n                // Set info.lastPollTimeMs after the fetch completes, whether\n                // or not it succeeded. Promise.prototype.finally would be nice\n                // here, but we don't have a polyfill for that at the moment,\n                // and this code has historically silenced errors, which is not\n                // the behavior of .finally(updateLastPollTime).\n                updateLastPollTime,\n                updateLastPollTime\n              );\n            }\n          }\n        });\n\n        // If there were no entries in this.pollingInfoByQueryId, then\n        // nextTimeLimitMs will still be Infinity, so this.schedulePoll will\n        // not be called, thus ending the master polling interval.\n        if (isFinite(nextTimeLimitMs)) {\n          this.schedulePoll(nextTimeLimitMs);\n        }\n      }, timeLimitMs),\n    };\n  }\n}\n","import { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, Cache, DataProxy } from 'apollo-cache';\n\nimport { QueryStoreValue } from '../data/queries';\nimport {\n  getOperationName,\n  tryFunctionOrLogError,\n  graphQLResultHasError,\n} from 'apollo-utilities';\nimport { MutationQueryReducer } from '../core/types';\n\nexport type QueryWithUpdater = {\n  updater: MutationQueryReducer<Object>;\n  query: QueryStoreValue;\n};\n\nexport interface DataWrite {\n  rootId: string;\n  result: any;\n  document: DocumentNode;\n  operationName: string | null;\n  variables: Object;\n}\n\nexport class DataStore<TSerialized> {\n  private cache: ApolloCache<TSerialized>;\n\n  constructor(initialCache: ApolloCache<TSerialized>) {\n    this.cache = initialCache;\n  }\n\n  public getCache(): ApolloCache<TSerialized> {\n    return this.cache;\n  }\n\n  public markQueryResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n    fetchMoreForQueryId: string | undefined,\n    ignoreErrors: boolean = false,\n  ) {\n    let writeWithErrors = !graphQLResultHasError(result);\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markSubscriptionResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n  ) {\n    // the subscription interface should handle not sending us results we no longer subscribe to.\n    // XXX I don't think we ever send in an object with errors, but we might in the future...\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markMutationInit(mutation: {\n    mutationId: string;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n    optimisticResponse: Object | Function | undefined;\n  }) {\n    if (mutation.optimisticResponse) {\n      let optimistic: Object;\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic = mutation.optimisticResponse;\n      }\n\n      const changeFn = () => {\n        this.markMutationResult({\n          mutationId: mutation.mutationId,\n          result: { data: optimistic },\n          document: mutation.document,\n          variables: mutation.variables,\n          updateQueries: mutation.updateQueries,\n          update: mutation.update,\n        });\n      };\n\n      this.cache.recordOptimisticTransaction(c => {\n        const orig = this.cache;\n        this.cache = c;\n\n        try {\n          changeFn();\n        } finally {\n          this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  }\n\n  public markMutationResult(mutation: {\n    mutationId: string;\n    result: ExecutionResult;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n  }) {\n    // Incorporate the result from this mutation into the store\n    if (!graphQLResultHasError(mutation.result)) {\n      const cacheWrites: Cache.WriteOptions[] = [];\n      cacheWrites.push({\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      if (mutation.updateQueries) {\n        Object.keys(mutation.updateQueries)\n          .filter(id => mutation.updateQueries[id])\n          .forEach(queryId => {\n            const { query, updater } = mutation.updateQueries[queryId];\n            // Read the current query result from the store.\n            const { result: currentQueryResult, complete } = this.cache.diff({\n              query: query.document,\n              variables: query.variables,\n              returnPartialData: true,\n              optimistic: false,\n            });\n\n            if (!complete) {\n              return;\n            }\n\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = tryFunctionOrLogError(() =>\n              updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables,\n              }),\n            );\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables,\n              });\n            }\n          });\n      }\n\n      this.cache.performTransaction(c => {\n        cacheWrites.forEach(write => c.write(write));\n      });\n\n      // If the mutation has some writes associated with it then we need to\n      // apply those writes to the store by running this reducer again with a\n      // write action.\n      const update = mutation.update;\n      if (update) {\n        this.cache.performTransaction(c => {\n          tryFunctionOrLogError(() => update(c, mutation.result));\n        });\n      }\n    }\n  }\n\n  public markMutationComplete({\n    mutationId,\n    optimisticResponse,\n  }: {\n    mutationId: string;\n    optimisticResponse?: any;\n  }) {\n    if (!optimisticResponse) return;\n    this.cache.removeOptimistic(mutationId);\n  }\n\n  public markUpdateQueryResult(\n    document: DocumentNode,\n    variables: any,\n    newResult: any,\n  ) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables,\n      query: document,\n    });\n  }\n\n  public reset(): Promise<void> {\n    return this.cache.reset();\n  }\n}\n","export const version = \"2.5.1\"","import {\n  ApolloLink,\n  Operation,\n  NextLink,\n  FetchResult,\n  GraphQLRequest,\n  execute,\n} from 'apollo-link';\nimport { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, DataProxy } from 'apollo-cache';\nimport {\n  removeConnectionDirectiveFromDocument,\n} from 'apollo-utilities';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { QueryManager } from './core/QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  Resolvers,\n} from './core/types';\nimport { ObservableQuery } from './core/ObservableQuery';\nimport { LocalState, FragmentMatcher } from './core/LocalState';\nimport { Observable } from './util/Observable';\n\nimport {\n  QueryBaseOptions,\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ModifiableWatchQueryOptions,\n  MutationBaseOptions,\n} from './core/watchQueryOptions';\n\nimport { DataStore } from './data/store';\n\nimport { version } from './version';\n\n\nexport interface DefaultOptions {\n  watchQuery?: ModifiableWatchQueryOptions;\n  query?: QueryBaseOptions;\n  mutate?: MutationBaseOptions;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport default class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public store: DataStore<TCacheShape>;\n  public cache: ApolloCache<TCacheShape>;\n  public queryManager: QueryManager<TCacheShape> | undefined;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private devToolsHookCb: Function;\n  private proxy: ApolloCache<TCacheShape> | undefined;\n  private ssrMode: boolean;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools,\n      queryDeduplication = true,\n      defaultOptions,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    // If a link hasn't been defined, but local state resolvers have been set,\n    // setup a default empty link.\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n\n    if (!link || !cache) {\n      throw new InvariantError(`\n        In order to initialize Apollo Client, you must specify link & cache properties on the config object.\n        This is part of the required upgrade when migrating from Apollo Client 1.0 to Apollo Client 2.0.\n        For more information, please visit:\n          https://www.apollographql.com/docs/react/basics/setup.html\n        to help you get started.\n      `);\n    }\n\n    const supportedCache = new Map<DocumentNode, DocumentNode>();\n    const supportedDirectives = new ApolloLink(\n      (operation: Operation, forward: NextLink) => {\n        let result = supportedCache.get(operation.query);\n        if (!result) {\n          result = removeConnectionDirectiveFromDocument(operation.query);\n          supportedCache.set(operation.query, result);\n          supportedCache.set(result, result);\n        }\n        operation.query = result;\n        return forward(operation);\n      },\n    );\n\n    // remove apollo-client supported directives\n    this.link = supportedDirectives.concat(link);\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.ssrMode = ssrMode;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    // Attach the client instance to window to let us be found by chrome devtools, but only in\n    // development mode\n    const defaultConnectToDevTools =\n      process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      !(window as any).__APOLLO_CLIENT__;\n\n    if (\n      typeof connectToDevTools === 'undefined'\n        ? defaultConnectToDevTools\n        : connectToDevTools && typeof window !== 'undefined'\n    ) {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self\n      ) {\n        // First check if devtools is not installed\n        if (\n          typeof (window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined'\n        ) {\n          // Only for Chrome\n          if (\n            window.navigator &&\n            window.navigator.userAgent &&\n            window.navigator.userAgent.indexOf('Chrome') > -1\n          ) {\n            // tslint:disable-next-line\n            console.debug(\n              'Download the Apollo DevTools ' +\n                'for a better development experience: ' +\n                'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm',\n            );\n          }\n        }\n      }\n    }\n\n    this.version = version;\n\n    if (clientAwarenessName) {\n      this.clientAwareness.name = clientAwarenessName;\n    }\n\n    if (clientAwarenessVersion) {\n      this.clientAwareness.version = clientAwarenessVersion;\n    }\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    if (this.queryManager) {\n      this.queryManager.stop();\n    }\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = {\n        ...this.defaultOptions.watchQuery,\n        ...options,\n      } as WatchQueryOptions<TVariables>;\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.initQueryManager().watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = { ...this.defaultOptions.query, ...options } as QueryOptions<\n        TVariables\n      >;\n    }\n\n    invariant(\n      options.fetchPolicy !== 'cache-and-network',\n      'cache-and-network fetchPolicy can only be used with watchQuery'\n    );\n\n    // XXX Overwriting options is probably not the best way to do this long\n    // term...\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.initQueryManager().query<T>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<T = any, TVariables = OperationVariables>(\n    options: MutationOptions<T, TVariables>,\n  ): Promise<FetchResult<T>> {\n    if (this.defaultOptions.mutate) {\n      options = {\n        ...this.defaultOptions.mutate,\n        ...options,\n      } as MutationOptions<T, TVariables>;\n    }\n\n    return this.initQueryManager().mutate<T>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables>,\n  ): Observable<T> {\n    return this.initQueryManager().startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.initProxy().readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.initProxy().readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    const result = this.initProxy().writeQuery<TData, TVariables>(options);\n    this.initQueryManager().broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    const result = this.initProxy().writeFragment<TData, TVariables>(options);\n    this.initQueryManager().broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Sugar for writeQuery & writeFragment\n   * This method will construct a query from the data object passed in.\n   * If no id is supplied, writeData will write the data to the root.\n   * If an id is supplied, writeData will write a fragment to the object\n   * specified by the id in the store.\n   *\n   * Since you aren't passing in a query to check the shape of the data,\n   * you must pass in an object that conforms to the shape of valid GraphQL data.\n   */\n  public writeData<TData = any>(\n    options: DataProxy.WriteDataOptions<TData>,\n  ): void {\n    const result = this.initProxy().writeData<TData>(options);\n    this.initQueryManager().broadcastQueries();\n    return result;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * This initializes the query manager that tracks queries and the cache\n   */\n  public initQueryManager(): QueryManager<TCacheShape> {\n    if (!this.queryManager) {\n      this.queryManager = new QueryManager({\n        link: this.link,\n        store: this.store,\n        queryDeduplication: this.queryDeduplication,\n        ssrMode: this.ssrMode,\n        clientAwareness: this.clientAwareness,\n        localState: this.localState,\n        onBroadcast: () => {\n          if (this.devToolsHookCb) {\n            this.devToolsHookCb({\n              action: {},\n              state: {\n                queries: this.queryManager\n                  ? this.queryManager.queryStore.getStore()\n                  : {},\n                mutations: this.queryManager\n                  ? this.queryManager.mutationStore.getStore()\n                  : {},\n              },\n              dataWithOptimisticResults: this.cache.extract(true),\n            });\n          }\n        },\n      });\n    }\n    return this.queryManager;\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => {\n        return this.queryManager\n          ? this.queryManager.clearStore()\n          : Promise.resolve(null);\n      })\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => {\n        return this.queryManager && this.queryManager.reFetchObservableQueries\n          ? this.queryManager.reFetchObservableQueries()\n          : Promise.resolve(null);\n      });\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<void | null> {\n    const { queryManager } = this;\n    return Promise.resolve()\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())))\n      .then(\n        () =>\n          queryManager ? queryManager.clearStore() : Promise.resolve(null),\n      );\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> | Promise<null> {\n    return this.queryManager\n      ? this.queryManager.reFetchObservableQueries(includeStandby)\n      : Promise.resolve(null);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.initProxy().extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.initProxy().restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Initializes a data proxy for this client instance if one does not already\n   * exist and returns either a previously initialized proxy instance or the\n   * newly initialized instance.\n   */\n  private initProxy(): ApolloCache<TCacheShape> {\n    if (!this.proxy) {\n      this.initQueryManager();\n      this.proxy = this.cache;\n    }\n    return this.proxy;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}