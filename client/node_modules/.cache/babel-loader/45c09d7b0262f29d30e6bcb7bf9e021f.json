{"ast":null,"code":"import _regeneratorRuntime from \"/var/www/html/chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/var/www/html/chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/var/www/html/chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/var/www/html/chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/var/www/html/chat-app/client/src/Message.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment';\nimport { MessageQuery, CreateMessageMutation, UserTypingMutation, MessageSubscription, UserTypingSubscription } from './Message-Query';\n\nconst Message = props => {\n  const chatBox = useRef(null);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        message = _useState2[0],\n        setMessage = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userTyping = _useState4[0],\n        setUser = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        timer = _useState6[0],\n        setTimer = _useState6[1];\n\n  const handleShow = () => {\n    props.setStyle();\n  };\n\n  useEffect(() => {\n    props.message.subscribeToMore({\n      document: MessageSubscription,\n      variables: {\n        receiverMail: props.email\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) return prev;\n        const msg = subscriptionData.data.newMessage;\n\n        if (prev.messages.find(x => x.id === msg.id)) {\n          return prev;\n        }\n\n        return _objectSpread({}, prev, {\n          messages: [...prev.messages, msg]\n        });\n      }\n    });\n    props.message.subscribeToMore({\n      document: UserTypingSubscription,\n      variables: {\n        receiverMail: props.email\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        if (!subscriptionData.data) return prev;\n        const user = subscriptionData.data.userTyping;\n        setUser(user);\n      }\n    });\n\n    if (chatBox.current) {\n      scrollToBottom();\n    }\n  });\n\n  const scrollToBottom = () => {\n    chatBox.current.scrollIntoView();\n  };\n\n  const handleChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var email, receiverMail, changeMail;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            setMessage(e.target.value);\n            email = props.email, receiverMail = props.receiverMail;\n            _context2.next = 4;\n            return props.userTyping({\n              variables: {\n                email,\n                receiverMail\n              }\n            });\n\n          case 4:\n            changeMail = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return props.userTyping({\n                        variables: {\n                          email: 'email',\n                          receiverMail\n                        }\n                      });\n\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }));\n\n              return function changeMail() {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            clearTimeout(timer);\n            setTimer(setTimeout(changeMail, 2000));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function handleChange(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const handleSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(e, message, email) {\n      var receiverMail;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            setMessage('');\n            e.preventDefault();\n            receiverMail = props.receiverMail;\n\n            if (message.length) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", null);\n\n          case 5:\n            _context3.next = 7;\n            return props.createMessage({\n              variables: {\n                receiverMail: receiverMail,\n                senderMail: email,\n                message: message,\n                timestamp: Date.now()\n              },\n              update: (store, {\n                data: {\n                  createMessage\n                }\n              }) => {\n                const data = store.readQuery({\n                  query: MessageQuery\n                });\n                data.messages.push(createMessage);\n                store.writeQuery({\n                  query: MessageQuery,\n                  data\n                });\n              }\n            });\n\n          case 7:\n            _context3.next = 9;\n            return props.userTyping({\n              variables: {\n                email: 'email',\n                receiverMail\n              }\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n\n    return function handleSubmit(_x2, _x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  const _props$message = props.message,\n        error = _props$message.error,\n        loading = _props$message.loading,\n        messages = _props$message.messages,\n        email = props.email,\n        receiverMail = props.receiverMail,\n        receiverName = props.receiverName,\n        userLeft = props.userLeft;\n  if (error || loading) return null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"personal-chat\",\n    style: props.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chats-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"back-button\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bar1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bar2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bar3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-typing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, userTyping && userTyping === receiverMail ? \"\".concat(receiverName, \" is typing\") : receiverName)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"all-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, messages.map(item => item.senderMail === email && item.receiverMail === receiverMail || item.senderMail === receiverMail && item.receiverMail === email ? /*#__PURE__*/React.createElement(\"div\", {\n    key: item.id,\n    className: item.users.map(a => a.email === receiverMail ? 'receiver' : 'sender'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sender-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, item.users.map(x => x.name)), item.message, ' ', /*#__PURE__*/React.createElement(\"span\", {\n    className: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, \" \", moment(item.timestamp).fromNow())) : ''), userLeft && userLeft === receiverMail ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, receiverName, \" has left the chat. \") : null), receiverMail && receiverName && !userLeft ? /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e, message, email),\n    ref: chatBox,\n    className: \"chat-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    style: {\n      margin: 10\n    },\n    placeholder: 'Say something to ' + receiverName,\n    fullWidth: true,\n    name: \"message\",\n    value: message,\n    onChange: handleChange,\n    margin: \"normal\",\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"select-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }, \"Select a logged in user from the left panel\"));\n};\n\nexport default compose(graphql(MessageQuery, {\n  name: 'message'\n}), graphql(CreateMessageMutation, {\n  name: 'createMessage'\n}), graphql(UserTypingMutation, {\n  name: 'userTyping'\n}))(Message);","map":{"version":3,"sources":["/var/www/html/chat-app/client/src/Message.js"],"names":["React","useState","useEffect","useRef","graphql","compose","TextField","moment","MessageQuery","CreateMessageMutation","UserTypingMutation","MessageSubscription","UserTypingSubscription","Message","props","chatBox","message","setMessage","userTyping","setUser","timer","setTimer","handleShow","setStyle","subscribeToMore","document","variables","receiverMail","email","updateQuery","prev","subscriptionData","data","msg","newMessage","messages","find","x","id","user","current","scrollToBottom","scrollIntoView","handleChange","e","target","value","changeMail","clearTimeout","setTimeout","handleSubmit","preventDefault","length","createMessage","senderMail","timestamp","Date","now","update","store","readQuery","query","push","writeQuery","error","loading","receiverName","userLeft","style","map","item","users","a","name","fromNow","margin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment';\nimport {\n  MessageQuery,\n  CreateMessageMutation,\n  UserTypingMutation,\n  MessageSubscription,\n  UserTypingSubscription\n} from './Message-Query';\n\nconst Message = props => {\n  const chatBox = useRef(null);\n\n  const [message, setMessage] = useState('');\n\n  const [userTyping, setUser] = useState('');\n\n  const [timer, setTimer] = useState(null);\n\n  const handleShow = () => {\n    props.setStyle();\n  };\n\n  useEffect(() => {\n    props.message.subscribeToMore({\n      document: MessageSubscription,\n      variables: {\n        receiverMail: props.email\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const msg = subscriptionData.data.newMessage;\n        if (prev.messages.find(x => x.id === msg.id)) {\n          return prev;\n        }\n        return { ...prev, messages: [...prev.messages, msg] };\n      }\n    });\n    props.message.subscribeToMore({\n      document: UserTypingSubscription,\n      variables: {\n        receiverMail: props.email\n      },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const user = subscriptionData.data.userTyping;\n        setUser(user);\n      }\n    });\n    if (chatBox.current) {\n      scrollToBottom();\n    }\n  });\n\n  const scrollToBottom = () => {\n    chatBox.current.scrollIntoView();\n  };\n\n  const handleChange = async e => {\n    setMessage(e.target.value);\n    const { email, receiverMail } = props;\n    await props.userTyping({\n      variables: {\n        email,\n        receiverMail\n      }\n    });\n    const changeMail = async () => {\n      await props.userTyping({\n        variables: {\n          email: 'email',\n          receiverMail\n        }\n      });\n    };\n    clearTimeout(timer);\n    setTimer(setTimeout(changeMail, 2000));\n  };\n\n  const handleSubmit = async (e, message, email) => {\n    setMessage('');\n    e.preventDefault();\n    const { receiverMail } = props;\n    if (!message.length) return null;\n    await props.createMessage({\n      variables: {\n        receiverMail: receiverMail,\n        senderMail: email,\n        message: message,\n        timestamp: Date.now()\n      },\n      update: (store, { data: { createMessage } }) => {\n        const data = store.readQuery({ query: MessageQuery });\n        data.messages.push(createMessage);\n        store.writeQuery({ query: MessageQuery, data });\n      }\n    });\n    await props.userTyping({\n      variables: {\n        email: 'email',\n        receiverMail\n      }\n    });\n  };\n\n  const {\n    message: { error, loading, messages },\n    email,\n    receiverMail,\n    receiverName,\n    userLeft\n  } = props;\n\n  if (error || loading) return null;\n\n  return (\n    <div className=\"personal-chat\" style={props.style}>\n      <div className=\"chats-header\">\n        <div className=\"back-button\" onClick={handleShow}>\n          <div className=\"bar1\" />\n          <div className=\"bar2\" />\n          <div className=\"bar3\" />\n        </div>\n        <div className=\"user-typing\">\n          {userTyping && userTyping === receiverMail\n            ? `${receiverName} is typing`\n            : receiverName}\n        </div>\n      </div>\n      <div className=\"all-messages\">\n        {messages.map(item =>\n          (item.senderMail === email && item.receiverMail === receiverMail) ||\n          (item.senderMail === receiverMail && item.receiverMail === email) ? (\n            <div\n              key={item.id}\n              className={item.users.map(a =>\n                a.email === receiverMail ? 'receiver' : 'sender'\n              )}\n            >\n              <div className=\"sender-name\">{item.users.map(x => x.name)}</div>\n              {item.message}{' '}\n              <span className=\"time\"> {moment(item.timestamp).fromNow()}</span>\n            </div>\n          ) : (\n            ''\n          )\n        )}\n        {userLeft && userLeft === receiverMail ? (\n          <div>{receiverName} has left the chat. </div>\n        ) : null}\n      </div>\n      {receiverMail && receiverName && !userLeft ? (\n        <form\n          onSubmit={e => handleSubmit(e, message, email)}\n          ref={chatBox}\n          className=\"chat-box\"\n        >\n          <TextField\n            style={{ margin: 10 }}\n            placeholder={'Say something to ' + receiverName}\n            fullWidth\n            name=\"message\"\n            value={message}\n            onChange={handleChange}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n        </form>\n      ) : (\n        <div className=\"select-message\">\n          Select a logged in user from the left panel\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default compose(\n  graphql(MessageQuery, { name: 'message' }),\n  graphql(CreateMessageMutation, { name: 'createMessage' }),\n  graphql(UserTypingMutation, { name: 'userTyping' })\n)(Message);\n"]},"metadata":{},"sourceType":"module"}